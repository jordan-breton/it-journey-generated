{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Looking for someone to work on your project?","text":"<p>Working with someone new is far from easy. As a business owner myself, I know how hard it can be to trust someone you don't know to put his/her hands onto your project, whether you own a big company or start a new project alone.</p> <p>That's one of the purposes of this website! There, you'll find everything you would want to know about me, but let me introduce myself first!</p> <p>My name is Jordan Breton, I'm an experienced full-stack web developer with 8 years of development under my belt. I worked on dozens of pieces of software, from pet projects becoming serious to mature (and sometimes legacy) products with an active customer base for years.</p>"},{"location":"#why-me","title":"Why me?","text":"<p>See my full skill set See my resume</p>"},{"location":"#global-approach","title":"Global approach","text":"<p>As a full-stack developer and business owner, I don't only think about backend, fronted, APIs, architecture nor  good practices. I also take infrastructure, costs, management, team skills, budgets, client's need, product's specificities  into consideration to bring you the best advice in your situation for your product.</p>"},{"location":"#deep-knowledge-experience","title":"Deep knowledge &amp; experience","text":"<p>The web ecosystem is tremendously large. I would never claim to know everything about it, it would be a lie. But  I know enough of it to deeply understand it. Designing an application or choosing wisely between available technologies   while keeping an eye on the dependency graph of your project require both deep knowledge and experience.</p>"},{"location":"#business-management-skills","title":"Business management skills","text":"<p>There is nothing more frustrating than having to deal with someone that doesn't understand how much business world is  different from the technical world. As such, identifying which technical debts are worth taking on from those who must  be avoided at any cost require both technical and business knowledge.</p>"},{"location":"#polyvalent-skills","title":"Polyvalent skills","text":"<p>From API design to low-level protocols, from back-end security to front-end technology available in browsers. From refactoring   to documentation writing. From database creation to software architecture. From development to deployment. From technical  knowledge to business experience.</p>"},{"location":"#open-minded","title":"Open minded","text":"<p>Rigorous can be a quality. But without a bit of flexibility, it quickly changes into dogmatism. There is a time and a place for  everything. To start writing tests, to start writing documentation, to design clean and SOLID code or to sprint with a   dirty workaround, to start optimizing something or even to refactor a large part of a codebase.</p>"},{"location":"#fast-at-problem-solving","title":"Fast at problem solving","text":"<p>Are your project's needs too specific? Is your problem hard to grasp? I'll provide you several options to choose from  to quickly move forward and stay productive. From brainstorming to pseudo or full implementation, in many situations I   may get you out of trouble in a matter of hours.</p>"},{"location":"#for-what-kind-of-missions","title":"For what kind of missions?","text":"<ul> <li> Consulting</li> <li> Auditing</li> <li> Refactoring</li> <li> Debugging</li> <li> API/DB/library design</li> </ul> <p>What about hiring for short or long term contracts?</p> <p>I'm open to great job opportunities, but it heavily depends on the project and the post you want me to occupy. Do not hesitate to reach me anyway, we may start a beautiful collaboration together </p> <p>Just be clear from the beginning about your proposition, it will save both of us time and energy!</p> <p>That being said, I'm more likely to accept a great opportunity in cybersecurity </p> <p> Contact me</p>"},{"location":"#is-that-all","title":"Is that all?","text":"<p>Of course not! I didn't introduce the most important part of this website yet: the blog section. It's the main purpose of this website and the most exciting (to me, at least). </p> <p>On this blog, I share my experience, my thoughts, my knowledge, my struggles too (because what would be a journey without a pinch of salt?) and pretty much anything related to the IT field. So... if it hasn't been done yet, what are you waiting for ?</p> <p>Discover my blog!</p>"},{"location":"terms-and-conditions/","title":"GENERAL TERMS AND CONDITIONS","text":""},{"location":"terms-and-conditions/#article-1-legal-information","title":"ARTICLE 1. LEGAL INFORMATION","text":"<p>Pursuant to Article 6 of Law No. 2004-575 of June 21, 2004 on confidence in the digital economy, it is specified in this article the identity of the various stakeholders in the context of its implementation and its follow-up.</p> <p>The IT Journey website is published by: Jordan Breton, contact@jordan-breton.com</p> <p>The publication director of the site is: Jordan Breton.</p> <p>The IT Journey site is hosted by: OVH, whose head office is located at the following address: 2 rue Kellermann - 59100 Roubaix - France</p>"},{"location":"terms-and-conditions/#article-2-presentation-of-the-site","title":"ARTICLE 2. PRESENTATION OF THE SITE","text":"<p>The IT Journey site aims to:</p> <p>Information sharing around IT in general and presenting myself to potential clients/recruiters.</p>"},{"location":"terms-and-conditions/#article-3-contact","title":"ARTICLE 3. CONTACT","text":"<p>For any question or request for information concerning the site, or any report of illegal content or activities, the user may contact the publisher at the following e-mail address: contact@jordan-breton.com</p>"},{"location":"terms-and-conditions/#article-4-acceptance-of-the-terms-of-use","title":"ARTICLE 4. ACCEPTANCE OF THE TERMS OF USE","text":"<p>Access to and use of the site are subject to the acceptance and compliance with these General Conditions of Use.</p> <p>The publisher reserves the right to modify, at any time and without notice, the site and services as well as these T&amp;Cs, in particular to adapt to changes to the site by providing new functionalities or deleting or modification of existing functionalities.</p> <p>It is therefore advisable for the user to refer before any navigation to the latest version of the T&amp;Cs, accessible at any time on the site. In case of disagreement with the T&amp;Cs, no use of the site can be made by the user.</p>"},{"location":"terms-and-conditions/#article-5-access-and-navigation","title":"ARTICLE 5. ACCESS AND NAVIGATION","text":"<p>The publisher implements the technical solutions at its disposal to allow access to the site 24 hours a day, 7 days a week. It may nevertheless at any time suspend, limit or interrupt access to the site or certain pages of it in order to proceed with updates, modifications of its content or any other action deemed necessary for the proper functioning of the site.</p> <p>These T&amp;Cs apply, as necessary, to any variation or extension of the site on existing or future social and/or community networks.</p>"},{"location":"terms-and-conditions/#article-6-site-management","title":"ARTICLE 6. SITE MANAGEMENT","text":"<p>For the proper management of the site, the publisher may at any time:</p> <ul> <li>Suspend, interrupt or limit access to all or part of the site, reserve access to the site, or to certain parts of the site, to a specific category of Internet user;</li> <li>Delete any information that could disrupt its operation or contravene national or international laws, or the rules of Netiquette;</li> <li>Suspend the site in order to make updates.</li> </ul>"},{"location":"terms-and-conditions/#article-7-responsibilities","title":"ARTICLE 7. RESPONSIBILITIES","text":"<p>The editor is only responsible for the content that he has edited himself.</p> <p>The publisher is not responsible:</p> <ul> <li>In the event of technical or computer problems or failures or of compatibility of the site with any hardware or software;</li> <li>Direct or indirect, material or immaterial, foreseeable or unforeseeable damage resulting from the use or difficulties in using the site or its services;</li> <li>Intrinsic characteristics of the Internet, in particular those relating to the lack of reliability and the lack of security of the information circulating on it;</li> <li>Illicit content or activities using his site without his having duly taken cognizance of it within the meaning of Law No. 2004-575 of June 21, 2004 on confidence in the digital economy and Law No. 2004-801 of August 6, 2004 on the protection of individuals with regard to the processing of personal data.</li> <li>Furthermore, the site cannot guarantee the accuracy, completeness and timeliness of the information disseminated there.</li> </ul> <p>The user is responsible for:</p> <ul> <li>The protection of his equipment and his data;</li> <li>The use he makes of the site or its services;</li> <li>If he does not respect either the letter or the spirit of these T&amp;Cs.</li> </ul>"},{"location":"terms-and-conditions/#article-8-hypertext-links","title":"ARTICLE 8. HYPERTEXT LINKS","text":"<p>The site may contain hypertext links pointing to other websites over which IT Journey has no control. Despite the prior and regular checks carried out by the publisher, the latter declines all responsibility for the content that can be found on these sites.</p> <p>The publisher authorizes the setting up of hypertext links to any page or document on its site provided that the setting up of these links is not carried out for commercial or advertising purposes.</p> <p>In addition, the prior information of the site editor is necessary before any hypertext link is set up.</p> <p>Excluded from this authorization are sites disseminating information of an illicit, violent, controversial, pornographic, xenophobic nature or which may affect the sensitivity of the greatest number.</p> <p>Finally, IT Journey reserves the right to have a hypertext link pointing to its site deleted at any time, if the site deems it not to comply with its editorial policy.</p>"},{"location":"terms-and-conditions/#article-9-confidentiality","title":"ARTICLE 9. CONFIDENTIALITY","text":""},{"location":"terms-and-conditions/#1-data-collected-and-processed-and-data-collection-method","title":"1. DATA COLLECTED AND PROCESSED, AND DATA COLLECTION METHOD","text":"<p>In accordance with the provisions of Article 5 of European Regulation 2016/679, the collection and processing of site user data comply with the following principles:</p> <ul> <li>Legality, loyalty and transparency: data can only be collected and processed with the consent of the user who owns the data. Each time personal data is collected, the user will be informed that his data is collected, and for what reasons his data is collected;</li> <li>Limited purposes: the collection and processing of data are carried out to meet one or more objectives determined in these general conditions of use;</li> <li>Minimization of the collection and processing of data: only the data necessary for the proper execution of the objectives pursued by the site are collected;</li> <li>Retention of reduced data over time: the data is kept for a limited period, of which the user is informed. If the retention period cannot be communicated to the user;</li> <li>Integrity and confidentiality of the data collected and processed: the data controller undertakes to guarantee the integrity and confidentiality of the data collected.</li> <li> <p>In order to be lawful, and in accordance with the requirements of Article 6 of European Regulation 2016/679, the collection and processing of personal data can only take place if they comply with at least one of the conditions below. following listed:</p> </li> <li> <p>The user has expressly consented to the processing;</p> </li> <li>The processing is necessary for the proper performance of a contract;</li> <li>The processing meets a legal obligation;</li> <li>The processing is explained by a necessity linked to the safeguard of the vital interests of the person concerned or of another natural person;</li> <li>The processing can be explained by a necessity linked to the performance of a task in the public interest or which comes under the exercise of public authority;</li> <li>The processing and collection of personal data are necessary for the purposes of the legitimate and private interests pursued by the controller or by a third party.</li> </ul> <p>The IT Journey site does not collect any data.</p>"},{"location":"terms-and-conditions/#2-hosting-of-data","title":"2. HOSTING OF DATA","text":"<p>As mentioned above, the IT Journey site is hosted by: OVH, whose head office is located at the following address: 2 rue Kellermann - 59100 Roubaix - France</p> <p>The data collected and processed by the site are exclusively hosted and processed in France.</p>"},{"location":"terms-and-conditions/#3-person-responsible-for-data-processing","title":"3. PERSON RESPONSIBLE FOR DATA PROCESSING","text":"<p>The person responsible for processing personal data is: Jordan Breton. He can be contacted as follows:</p> <p>By email at contact@jordan-breton.com.</p>"},{"location":"terms-and-conditions/#4-personal-data-of-minors","title":"4. PERSONAL DATA OF MINORS","text":"<p>In accordance with the provisions of Article 8 of European Regulation 2016/679 and the Data Protection Act, only minors aged 15 or over can consent to the processing of their personal data.</p> <p>If the user is a minor under the age of 15, the agreement of a legal representative will be required so that personal data can be collected and processed.</p>"},{"location":"terms-and-conditions/#5-users-rights-and-procedures-for-the-implementation-of-users-rights","title":"5. USER'S RIGHTS AND PROCEDURES FOR THE IMPLEMENTATION OF USER'S RIGHTS","text":"<p>In accordance with the regulations concerning the processing of personal data, the user has the rights listed below.</p> <p>In order for the data controller to comply with his request, the user is required to communicate to him: his first and last name as well as his e-mail address.</p> <p>The data controller is required to respond to the user within a maximum of 30 (thirty) days.</p>"},{"location":"terms-and-conditions/#a-right-of-access-rectification-and-right-to-be-forgotten","title":"a. Right of access, rectification and right to be forgotten","text":"<p>The user can read, update, modify or request the deletion of the data concerning him, by respecting the procedure set out below:</p> <p>The user must send an email to the person responsible for processing personal data at contact@jordan-breton.com or by letter to 13 C rue du Fort, 54550 Maizi\u00e8res, France.</p>"},{"location":"terms-and-conditions/#b-right-to-data-portability","title":"b. Right to data portability","text":"<p>the user has the right to request the portability of his personal data, held by the site, to another site, by complying with the following procedure:</p> <p>The user must make a portability request of his personal data with the data controller, by sending an e-mail to the address provided above.</p>"},{"location":"terms-and-conditions/#c-right-to-limitation-and-opposition-of-data-processing","title":"c. Right to limitation and opposition of data processing","text":"<p>Finally, the user has the right to request the limitation or to oppose the processing of his data by the site, without the site being able to refuse, except to demonstrate the existence of legitimate and compelling reasons, which may prevail over the interests and the rights and freedoms of the user.</p>"},{"location":"terms-and-conditions/#d-right-to-determine-the-fate-of-data-after-death","title":"d. Right to determine the fate of data after death","text":"<p>The user is reminded that he can organize what should be the future of his data collected and processed if he dies, in accordance with law n \u00b0 2016-1321 of October 7 2016.</p>"},{"location":"terms-and-conditions/#e-right-to-seize-the-competent-supervisory-authority","title":"e. Right to seize the competent supervisory authority","text":"<p>In the event that the data controller decides not to respond to the user's request, and the user wishes to contest this decision, he is entitled to seize the CNIL (Commission Nationale de l'Informatique et des Libert\u00e9s, https://www.cnil.fr) or any competent judge.</p>"},{"location":"terms-and-conditions/#6-obligations-of-the-data-processor","title":"6. OBLIGATIONS OF THE DATA PROCESSOR","text":"<p>The data controller undertakes to protect the personal data collected, not to transmit them to third parties without the user having been informed and to respect the purposes for which this data was collected.</p> <p>The site has an SSL certificate to ensure that information and data transfer passing through the site are secure.</p> <p>In addition, the data controller undertakes to notify the user in the event of rectification or deletion of the data, unless this entails disproportionate formalities, costs and procedures for him.</p> <p>In the event that the integrity, confidentiality or security of the user's personal data is compromised, the controller undertakes to inform the user by any means.</p>"},{"location":"terms-and-conditions/#article-10-cookies","title":"ARTICLE 10. COOKIES","text":""},{"location":"terms-and-conditions/#1-users-consent-to-the-use-of-cookie-files-by-the-site","title":"1. USER'S CONSENT TO THE USE OF \"COOKIE\" FILES BY THE SITE","text":"<p>The site may use \"cookie\" techniques enabling it to process statistics and information on traffic, to facilitate navigation and to improve the service for the comfort of the user. For the use of \"cookie\" files involving the saving and analysis of personal data, the consent of the user is necessarily requested.</p> <p>This user consent is considered valid for a maximum of 13 (thirteen) months. At the end of this period, the site will again request the user's authorization to save \"cookie\" files on their hard drive.</p>"},{"location":"terms-and-conditions/#2-users-opposition-to-the-use-of-cookies-files-by-the-site","title":"2. USER'S OPPOSITION TO THE USE OF \"COOKIES\" FILES BY THE SITE","text":"<p>The user is informed that he can oppose the recording of these \"cookies\" by configuring his navigation.</p> <p>In the event that the user decides to deactivate the \"cookie\" files, he may continue browsing the site. However, any malfunction of the site caused by this manipulation could not be considered as being due to the publisher of the site.</p>"},{"location":"terms-and-conditions/#3-description-of-cookie-files-used-by-the-site","title":"3. DESCRIPTION OF \"COOKIE\" FILES USED BY THE SITE","text":"<p>The publisher of the site draws the user's attention to the fact that no cookies are used by this site.</p> <p>By browsing the site, the user is informed that third-party \"cookie\" files may be saved.</p> <p>More specifically, these are the following third parties:</p> <p>Giscus</p> <p>The user's attention is drawn to the fact that these sites have their own privacy policies and general conditions of use that may differ from those presented here. The site editor invites users to consult the privacy policies of these sites.</p>"},{"location":"terms-and-conditions/#article-11-intellectual-property","title":"ARTICLE 11. INTELLECTUAL PROPERTY","text":"<p>The structure of the site but also the texts, graphics, images, photographs, sounds, videos and computer applications that compose it are the property of the publisher and are protected as such by the laws in force under the intellectual property.</p> <p>Any representation, reproduction, adaptation or partial or total exploitation of the content, registered trademarks and services offered by the site, by any means whatsoever, without the prior, express and written authorization of the publisher, is strictly prohibited and would be liable to constitute an infringement within the meaning of articles L. 335-2 and following of the Intellectual Property Code. And this, with the exception of elements expressly designated as free of rights on the site.</p> <p>Access to the site does not constitute recognition of a right and, in general, does not confer any intellectual property rights relating to an element of the site, which remain the exclusive property of the publisher.</p> <p>The user is prohibited from entering data on the site that would modify or would be likely to modify its content or appearance.</p>"},{"location":"terms-and-conditions/#article-12-applicable-law-and-jurisdiction","title":"ARTICLE 12. APPLICABLE LAW AND JURISDICTION","text":"<p>These General Conditions of Use are governed by French law. In the event of a dispute and in the absence of an amicable agreement, the dispute will be brought before the French courts in accordance with the rules of jurisdiction in force.</p>"},{"location":"todo/","title":"TODO list","text":"<p>A simple personal reminder for pending ideas &amp; work to be done on this website  It's very informal and only act as a reminder.</p>"},{"location":"todo/#articles","title":"Articles","text":"<ul> <li> DX</li> <li> What is code (and why AIs are not that much a big deal (very complex compilers?))</li> <li> Git branching model</li> <li> Mkdocs + material theme<ul> <li> Contact form API + component</li> <li> Documentation writing</li> <li> Home page customization</li> </ul> </li> <li> Relational Model DB Configuration storage</li> <li> uws-reverse-proxy</li> <li> wssf framework<ul> <li> DIC</li> <li> WebComponents</li> <li> CSPs</li> <li> WebRTC</li> <li> templating system</li> </ul> </li> <li> Home VPS</li> <li> DNS server for home network</li> <li> Don't fear to not being smart enough: you'll love working in IT!</li> <li> The NPM problem</li> <li> \ud83c\udfb6 I'm a poor lonesome dev \ud83c\udfb6</li> <li> My first project, what a failure!</li> <li> SSL certificate for dev environment</li> <li> Real-world VPS setup<ul> <li> Part 1: Preparation, installation</li> <li> Part 2: Configuration</li> <li> Part 3: Bonus</li> </ul> </li> <li> Hello world (blog presentation)</li> </ul>"},{"location":"todo/#pages","title":"Pages","text":"<ul> <li> Home<ul> <li> Layout &amp; first view</li> <li> Content</li> </ul> </li> <li> About<ul> <li> History</li> <li> Story</li> <li> Skill set</li> </ul> </li> </ul> <p>Note</p> <p>Would you like me to add something to this list? Just leave a comment, and if I like the subject or the idea, I'll write about it </p>"},{"location":"writing/","title":"WIP (Writing in progress)","text":"<p>Sorry, this article has not been published yet!</p> <p>The link that led you there is not broken. Sometimes, when I'm writing something I think:</p> <p>Hey, this would be a great idea for an article!</p> <p>So I drop a link where the idea came up and add the article idea on my TODO list. When I'm not too busy or if I need a break,  I read my TODO list to pick up a subject and... well, a new article is published.</p> <p>So...  the article you're looking for will come... one day or another </p> <p>Just be patient </p>"},{"location":"about/","title":"About","text":""},{"location":"about/#the-author","title":"The author","text":"<p>My name is Jordan Breton.</p> <p>I'm a full-stack Web Developer since 2015 and I'm a freelance and a consultant for various individuals and small-to-medium-sized companies.</p> <p>I fear no project. No matter what technologies yours was built upon, no matter if it is a well known and shiny well-documented stack or an obscure uncommented homemade system. Code is code. IT is IT.</p> <p>I'm a passionate developer, and I strongly believe in what John Heywood said: </p> <p>Nothing is impossible to a willing heart.</p> <p>Skill set Blog History </p> <p>What about hiring for short or long term contracts?</p> <p>I'm open to great job opportunities, but it heavily depends on the project and the post you want me to occupy. Do not hesitate to reach me anyway, we may start a beautiful collaboration together </p> <p>Just be clear from the beginning about your proposition, it will save both of us time and energy!</p> <p>That being said, I'm more likely to accept a great opportunity in cybersecurity </p>"},{"location":"about/#contact","title":"Contact","text":"<ul> <li> <p> By email</p> <p>If you want us to work together or would want to hire me for short or long-term contract,   just email me and I'll give you an answer in 48h.</p> <p> contact@jordan-breton.com</p> </li> <li> <p> On LinkedIn</p> <p>Do not hesitate to follow me on LinkedIn if you're interested in my content or if you want us to  collaborate on content creation, cross promotion or on one of your projects.</p> <p> My LinkedIn profile</p> </li> <li> <p> On Twitter</p> <p>I'm much more of a follower myself on Twitter, but I may retweet and occasionally post something here.  Feels free to tag me if you want my reaction about something.</p> <p> My twitter profile</p> </li> </ul> <p>Note</p> <p>Social networks are not my cup of tea, but I do like to create content and discover new things. If you think your own work may interest me, don't hesitate to engage in a conversation </p>"},{"location":"about/#the-website","title":"The website","text":"<p>It Journey has three main purposes:</p> <ul> <li>Being a starting point to my career inflection toward cybersecurity.</li> <li>Sharing my knowledge and my journey as a full-stack web developer.</li> <li>Introducing myself to all of those who would want to work with me in a way or another.</li> </ul> <p>If you want more details about the genesis of this website, check the first blog article that explains this in more details </p>"},{"location":"about/history/","title":"History","text":"<p>You'll find below a quick overview of my resume. As I early started to work my own businesses, I can't quote all the companies I worked with either as a consultant, a freelance or a contractor both for privacy and brevity sakes.</p> <p>Yet, the quickest way to grasp my personality and my IT journey is to read the following short version of my history.</p> <p>Skill set Contact me</p>"},{"location":"about/history/#2012","title":"2012","text":"<p>I graduated from high school with a scientific baccalaureate in engineering sciences.</p>"},{"location":"about/history/#2012-2013","title":"2012 - 2013","text":"<p>Not yet sure about my orientation, I took a year of skills upgrade classes for applied arts (MANAA in French). I loved every second of it but in the course of this year, I discovered that what I enjoyed the most applying my creativity to was programming, that I started to learn out of pure curiosity.</p> <p>This curiosity promptly transformed into a strong interest, then a passion. At the end of the year, I took the decision to overcome my fear of not being smart enough to make a career in IT and applied for a two-years degree at university.</p>"},{"location":"about/history/#2013-2015","title":"2013 - 2015","text":"<p>I graduated from a two-years IT degree in the French university IUT Robert Schuman, Strasbourg, France,  where I acquired really strong bases. </p> <p>During this period, I loved (and still love!) to create various side projects. From an AES 128 implementation, to a basic CMS framework or, last but not least, the creation of my first personal website (dedicated to a novel I was writing at this moment) with a forum, hosted on a (very badly configured) VPS.</p> <p>Following the excellent result I got from my internship presentation in front of a jury, I decided to  seize this opportunity.</p>"},{"location":"about/history/#2015-2017","title":"2015 - 2017","text":"<p>Following my internship whose main goal was to evaluate and start building a web-based ERP tailored to the specific needs of a construction company, I signed my first long-term contract to pursue this project.</p> <p>You should take a look at this obviously predictable failure story there. That being said, if I had to go back in time to do it again, I would without hesitation. It was a hard time to get through at this moment, but the lessons I learned from it were priceless.</p>"},{"location":"about/history/#2017-2020","title":"2017 - 2020","text":"<p>I decided to start my own web agency by using a PHP framework written as a side project in the previous years. It was a successful experience that allowed me to work with various environments, persons and even technologies.</p> <p>During this period, I completed, enlarged and thorough my skills to grow as full-stack web developer, project manager and business owner. I did learn management skills as well as negotiation, administrative management, customer relationship, marketing and communication.</p> <p>Take a look at this story there.</p>"},{"location":"about/history/#2020-today","title":"2020 - Today","text":"<p>Even if building simple to complex showcase and e-commerce websites was interesting, after almost three years I decided to move toward a more fulfilling job as a consultant and freelancer.</p> <p>This period is much more technical and allows me to put my hands on very different (and often chaotic)  pieces of software. Working to their extension, maintenance, troubleshooting, documentation and/or replacement is something I'm enjoying a lot.</p> <p>At the same time, I wrote a Dark Fantasy book in French, started to build a NodeJS ecosystem to try to address several NPM problems and have fun building something huge and modular from scratch. I even started to learn digital painting as a hobby.</p>"},{"location":"about/history/#tomorrow","title":"Tomorrow","text":"<p>Even if I love what I'm doing right now, I kinda start to feel the urge to move forward again. Being passionate and amazed by the cybersecurity field since I started my IT journey, I'm currently preparing several certifications to finally get into this fascinating domain.</p> <p>Since this step forward is a very important one to me, I made a certification roadmap and will create a YouTube channel about my progression. The main goal being to be better at speaking English, keep motivation to learn the tremendous amount  of things I have to learn to achieve my objective and share with potentially interested people my experience doing so.</p> <p>May it be an encouragement for some folks around there that would want to enter the cybersecurity field too and didn't dare to make the first move yet :)</p>"},{"location":"about/roadmap/","title":"Certifications roadmap","text":"<p>As stated in many places on this website, my mid-term objective is to inflect my journey to move from the software design world to cybersecurity. The amount of knowledge I must acquire is pretty huge, but not as much as it would be for someone that would start his IT career from the very beginning.</p> <p>I'm convinced that learning cybersecurity will be win-win: I'll be better at software design, and my software design background will benefit to the future cybersecurity expert I want to become.</p> <p>Since no one should start such a journey without picking up a map, let's see what mine is.</p> <p>About nomenclature</p> <p>Most milestones embed three steps: </p> <ul> <li>courses: full courses followed taking notes</li> <li>study: learned, ready to pass the exam</li> <li>exam: exam passed</li> </ul> <p>For CompTIA A+ core 1 and core 2, the idea is to be sure to land my future cybersecurity knowledge focus on strong bases, to fill eventual gaps. Since it requires to passe two exams, and that I already need to get a fair amount of certifications to pay at the moment, I'll not pass the exam for core 1 nor core 2 in a near future to save money for more useful certifications first.</p> <ul> <li> CompTIA A+ Core 1 (220-1101)<ul> <li> Courses</li> <li> Study</li> </ul> </li> <li> CompTIA A+ Core 2 (220-1102)<ul> <li> Courses (in progress)</li> <li> Study</li> </ul> </li> <li> CompTIA Network+ (N10-008)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> <li> CompTIA Security+ (SY0-601)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> <li> CompTIA CySA+ (CS0-002)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> <li> CompTIA CASP+ (CAS-004)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> <li> CompTIA Pentest+ (PT0-002)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> <li> (ISC)\u00b2 CISSP (PT0-002)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> <li> OffSec PEN-200 (OSCP)<ul> <li> Courses</li> <li> Study</li> <li> Exam</li> </ul> </li> </ul> <p>A pretty long road to go, isn't it? Let's see where it will lead me!</p>"},{"location":"about/skill-set/","title":"Skills","text":""},{"location":"about/skill-set/#about-the-following-skill-set-presentation","title":"About The Following Skill Set Presentation","text":"<p>The following skill set is as exhaustive as possible. The level scale is inspired by the  CEFR (Common European Framework of Reference for Languages) to offer the most descriptive and simplest way of evaluating each skill.</p> <p>There is the adapted nomenclature:</p> Icon Level Description Beginner Barely able to use it for the simplest features. Elementary Understand basics, philosophy and can do simple things easily. Intermediate Sufficient understanding for smooth regular daily work starts to be productive. Upper intermediate Start using the most advanced features, medium productivity. Advanced Advanced usage, strong experience good productivity. Expert Almost full mastery and deep experience, full productivity. <p>Important</p> <p>As you read this, keep in mind that learning fast is part of my daily job.</p> <p>I have a very strong understanding of the web ecosystem as a whole, from networking to web technologies. I know  what's behind main frameworks in web stacks, what problem they do solve (and those they don't), as such I can be operational in a matter of days(1) on a new framework or technology I don't yet know.</p> <p>Being operational meaning reaching the <code>Elementary</code> level, and such being able to understand the tool and the code, the philosophy behind it and, of course, to work with it.</p> <ol> <li>If a good documentation can be provided. Without any documentation, the delay would either be a week or more depending on the degree of    rigor employed while developing said tool.</li> </ol>"},{"location":"about/skill-set/#meta","title":"Meta","text":"<p>This section regroups skills and knowledge indicators that are related to my daily work and/or past missions/businesses. They are not IT specific.</p>"},{"location":"about/skill-set/#business-management-skills","title":"Business &amp; Management Skills","text":"<ul> <li> Motivation<sup>1</sup> </li> <li> Problem-solving and decision-making </li> <li> Communication </li> <li> Budget Management<sup>2</sup> </li> <li> Organization </li> <li> Strategic ressources allocation<sup>3</sup> </li> <li> Planning &amp; estimation<sup>4</sup> </li> </ul>"},{"location":"about/skill-set/#soft-skills","title":"Soft Skills","text":"<ul> <li> <p> Team working</p> <p>Being able to work together with the same goal in mind and a strong cohesion sense is crucial to  succeed as a developer. But it's even more important when it comes to building something.</p> <p>I'm naturally open to others, friendly and eager to share whether it be about the projects I'm working on  or just every IT-related (or not) subjects.</p> </li> <li> <p> Adaptability</p> <p>My missions in the past few years were very different, with many companies, tools, people or even  workflow that adaptation became a second nature.</p> <p>Not only am I adapting to your project, team and processes, but I'll do my best for my code to be  as close as possible as the codebase I'm working on. Codebase homogeneity is one of the most important  things to maintain across a project's lifecycle.</p> </li> <li> <p> Creativity</p> <p>Creativity is such a fascinating thing. Some people refer to it as a gift. I strongly disagree.  I rather see creativity as a muscle: the more we invest time and effort to create new things, the most creative we become.</p> <p>Being creative is an active process. We're not creating many things because we're creative. We're creative  because we're trying to create as many things as possible, as often as possible.</p> </li> <li> <p> Resourcefulness &amp; curiosity</p> <p>My work isn't about knowing or memorizing everything, but rather knowing where to search for, keeping my knowledge up to date  and reading/listening/watching as much as possible about as different non-related subjects as possible.</p> <p>This way, I can dig and thorough a subject later, when I think that it may be useful for my current task, mission or project.</p> </li> <li> <p> Critical thinking</p> <p>Most of my side project's purpose is exactly this. Before even trying a new framework/library, I try  to ask myself: How would I solve the problems it solves?</p> <p>Implementing a proof of concept before using a library/a framework feature is something I do a lot. It not only help me improve  my skills overtime, but it helps me spot my solutions strengths and weaknesses.</p> </li> <li> <p> Openness to criticism</p> <p>Writing code is not just about applying technical knowledge. It's about solving problems in a creative way. The creative way  part is such a subjective thing that not being able to keep a certain distance with our code may poison our developer career.</p> <p>I don't see criticism has something against me, but as something that is helping me being better at what I do. As such, substantiate critics are always welcome.</p> </li> </ul>"},{"location":"about/skill-set/#technical-skills","title":"Technical Skills","text":""},{"location":"about/skill-set/#concepts","title":"Concepts","text":"<ul> <li>OOP </li> <li>SOLID principle </li> <li>Relational Model </li> <li>DDD </li> <li>TDD </li> <li>CQRS </li> <li>Event Sourcing </li> <li>Functional programming </li> </ul>"},{"location":"about/skill-set/#languages","title":"Languages","text":"<ul> <li> JavaScript (ECMAScript 2022) </li> <li> CSS 3 </li> <li> HTML 5 </li> <li> PHP (&gt; 5.5) </li> <li> SQL </li> <li> Bash / shell scripting </li> <li> TypeScript<sup>5</sup> </li> <li> </li> <li> </li> <li> Java </li> </ul>"},{"location":"about/skill-set/#javascript-runtimes","title":"JavaScript Runtimes","text":"<ul> <li> Nodejs </li> <li> Electron </li> </ul>"},{"location":"about/skill-set/#web-technologies","title":"Web Technologies","text":"<ul> <li> AJAX/Fetch API </li> <li> Websocket (client, server, protocol)  </li> <li> HTTP/HTTPS (server, protocol) </li> <li> CSP </li> <li> Service Worker / PWA </li> <li> Web Worker </li> <li> WebComponents </li> <li> WebRTC (client, STUN/TURN, MCU) </li> <li> Push notifications </li> </ul>"},{"location":"about/skill-set/#system-administration","title":"System Administration","text":"<ul> <li> Linux (mainly ubuntu desktop &amp; server)  </li> <li> VPS setup </li> <li> DNS setup </li> <li> Mail server setup </li> </ul> <p>As a Web Agency founder, I set up the whole infrastructure including a dedicated server for a multi-site (created with a homemade framework), and a fully fledged multi-domain mail server, with web mail client, multi-domain web mail admin with quotas, spam &amp; virus filtering, etc.</p> <p>See a VPS setup example</p>"},{"location":"about/skill-set/#tools","title":"Tools","text":"<ul> <li> PHPStorm </li> <li> SublimeText </li> <li> Git </li> <li> GitHub </li> <li> MySQL Workbench </li> <li> MKDocs Material </li> <li> GitHub Actions<sup>6</sup> </li> <li> Visual Studio </li> <li> Eclipse </li> </ul>"},{"location":"about/skill-set/#databases","title":"Databases","text":"<ul> <li> MySQL </li> <li> MongoDB </li> <li> Elasticsearch </li> <li> Redis </li> </ul>"},{"location":"about/skill-set/#frameworks-cms","title":"Frameworks / CMS","text":"<ul> <li> Magento2 </li> <li> Wordpress </li> <li> React </li> <li> Angular </li> <li> Vue.js </li> </ul> <p>Not that spectacular, huh?</p> <p>My everyday work being for a long time to work on from-scratch projects without known frameworks, I must admit that it's not this page's most impressive section . </p> <p>But it doesn't mean I'm unable to work with them in no time. I had to slightly deal with them over the years, and my ability to enter and work on non-standard projects would allow me to work with those frameworks/CMSs  without requiring too much effort, especially since they benefit from a tremendous amount of online resources and very well written and thorough documentation.</p>"},{"location":"about/skill-set/#cloud-services","title":"Cloud services","text":"<ul> <li> AWS </li> <li> AWS S3 </li> <li> Azure AD </li> <li> OneDrive API </li> <li> Google Auth </li> <li> Google Drive API </li> <li> Box API </li> <li> DropBox API </li> <li> LinkedIn Auth </li> <li> Facebook Auth </li> </ul> <p>Note</p> <p>Most usages are integration into websites/applications, mostly on NodeJS for login and/or file upload/retrieval.</p> <p>The only real cloud configuration done on AWS for my part is an AWS Nano deployment to deliver a spectre instance at spectre.jordan-breton.com for my own usage.</p> <p>More generally, working with any cloud/service providers either with their UI and/or through their APIs is not that hard and only requires to be able to read their documentation most of the time. </p> <p>That being said, being a Cloud Engineer is not trivial at all, especially when it comes to working with the most famous providers.</p> <p>I plan to apply for cloud formations to get certified for Azure and AWS as soon as possible, since I love their services and staying up to date.</p> <p>The thing is... days are only 32 hours long, aren't they?</p>"},{"location":"about/skill-set/#non-it-skills","title":"Non-IT Skills","text":"<ul> <li> French novel writing </li> <li> French poetry writing </li> <li> Sketching </li> <li> Digital painting </li> </ul>"},{"location":"about/skill-set/#tools_1","title":"Tools","text":"<ul> <li> Photoshop </li> <li> Illustrator </li> <li> Microsoft Office suite </li> <li> Ardour </li> <li> After Effects </li> </ul>"},{"location":"about/skill-set/#languages_1","title":"Languages","text":"Language Written comprehension Written expression Oral comprehension Oral expression French (native) English <sup>7</sup> <ol> <li> <p>Working hard to run my own businesses early in my career while being alone for very long years was really challenging. But my motivation to stay the course and move forward never wavers, especially in the most difficult moments.\u00a0\u21a9</p> </li> <li> <p>As a business owner myself for quite a time, budget management was obviously a mandatory skill to learn.\u00a0\u21a9</p> </li> <li> <p>As a lonely developer with very few resources and a small-to-inexistent network when I started my IT-Journey, I had to deal with incredibly very limited time, money and skills. Dealing with these kinds of restrictions strengthened my abilities to prioritize and delay where needed.\u00a0\u21a9</p> </li> <li> <p>My time estimates improved greatly over the years but let's be honest, there is still room for improvement . No matter how much I try to stop underestimate the time needed to do something, my optimistic nature just keep staying in the way. This is one of those domains where time and practice are the only way to mastery.\u00a0\u21a9</p> </li> <li> <p>I worked only on a few projects with TypeScript. Since I'm an expert at JavaScript and OOP, mastering TypeScript is only a matter of syntax and practice.\u00a0\u21a9</p> </li> <li> <p>I already set up several GitHub actions for automatic and manual (one click) deployments from GitHub interface on a company VPS I configured, including emergency switches in case of outage one the main production server.\u00a0\u21a9</p> </li> <li> <p>Mainly missing some practice.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/","title":"Welcome on the IT-Journey blog!","text":"About this blog"},{"location":"blog/#what-will-you-find-in-this-blog","title":"What will you find in this blog?","text":"<p>Pretty much anything IT related; from tutorials to thoughts and experiences in programming, DBA, sysadmin, tech, security, hardware, software, tools...  There is so much to talk about, and still so much to learn!</p> <p>This is the beauty of IT: no matter how much you work, learn and practice, no matter how much time and efforts you put at it, there will still be something you don't know. Something you missed. Something more. Something new (or only new to you!) to deep dive in. It's also the most frustrating part of this field: you can't know everything.</p> <p>Is it really that impossible? Yes, it is. Does-it means that we should not try? Maybe. Will-it prevent us to keep trying? Surely not!</p>"},{"location":"blog/#last-posts","title":"Last posts","text":""},{"location":"blog/2023/02/21/hello-world/","title":"Hello world!","text":""},{"location":"blog/2023/02/21/hello-world/#hello-world","title":"Hello world!","text":"<p>What an inspired title for a first article posted on an IT blog, isn't it? Sadly, I wasn't able to resist the temptation, and here's what it looks like!</p> <p>This idea of sharing about my projects and experience is not quite new. I have long wanted to start a website like this but never found either the time or, to be honest, the courage to do so. So long that I didn't even graduate when I thought about it, something like 9 years ago.</p>"},{"location":"blog/2023/02/21/hello-world/#it-all-started-on-medium","title":"It all started on Medium","text":"<p>The thing is... the last day, while I was reading an article on Medium about the SOLID principle, I started to write a (too) long comment about how I thought the author was mistakenly confusing two concepts. While writing it, I also thought about those thousands of pretty bad posts about programming we can find on this kind of website. I felt angry.</p> <p>I used to find them pretentious, because it is obvious that their authors write about something they don't really understand.</p> <p>Before sending my comment, I proofread it and this time, it made me step back a few minutes. I thought about my journey and how much I learned along the way.</p> <p>It helped me realize few things.</p>"},{"location":"blog/2023/02/21/hello-world/#i-dont-think-i-would-have-done-better","title":"I don't think I would have done better","text":"<p>If I had started to write about programming when I started to code 9 years ago, I would have written bad articles too. I would have made at least equivalent and most likely worst mistakes in good faith and with good intentions. </p> <p>All I would have wanted to do would have been to just share about my passion, about my findings, about my journey.</p>"},{"location":"blog/2023/02/21/hello-world/#experience-vs-knowledge","title":"Experience vs knowledge","text":"<p>Obviously, those authors are not pretentious (at least most of them), they're just wrong because programming and IT in general is a very complex field in which experience is crucial.</p> <p>Some points can only be deeply understood once experienced. In that case, the need for the SOLID principal is something you can conceive but that most of us will really understand when we have to rewrite half our project because not applying it at all, or very poorly.</p> <p>Doing so, you'll understand in your bones why it is important,  why it must be taken very seriously and why it exists in the first place.</p>"},{"location":"blog/2023/02/21/hello-world/#self-confidence-vs-self-awareness","title":"Self-confidence vs self-awareness","text":"<p>Even today, with my knowledge and my experience, I'm not immune to being wrong or having misunderstood a key concept, while still being convinced of the opposite.  Learning is a matter of conflict between what we think we know and what we effectively know. </p> <p>Believing that we know is important for self-confidence. Being proved wrong in a way or another is important to progress. Balancing self-confidence and self-ignorance awareness is hard. I mean... really hard.</p>"},{"location":"blog/2023/02/21/hello-world/#to-conclude","title":"To conclude","text":"<p>I finally sent my comment after some corrections, thinking afterward that it would have been a better move to write an article about the mistake the author did. And I will </p> <p>This is this website genesis. I'll not pretend to be the only one that knows about <code>The Great IT Truth</code>, but let's start discussions about all and everything IT related. Let's talk about the difference between the idea, the theory, the practice and the experience.</p> <p>Let's challenge what we think we know.</p> <p>Let's try to go a little further than usual.</p> <p>Let's start this journey together </p>"},{"location":"blog/2023/03/05/ssl-certificates-in-dev-environment/","title":"SSL certificates in dev &amp; test environments","text":""},{"location":"blog/2023/03/05/ssl-certificates-in-dev-environment/#ssl-certificates-in-dev-test-environments","title":"SSL certificates in dev &amp; test environments","text":"<p>In simplest cases and for simplest projects, we don't bother with SSL certificates... until we start to work with some feature that won't work without it like WebRTC or PWA. Same thing if you want to  start working with third party APIs.</p> <p>Generating self-signed certificate quickly becomes mandatory, and managing them between several projects can be challenging if you don't do it properly...</p> <p>Have you ever heard about Root Certificates? It makes our lives better </p> <p>This tutorial is easy and quick to follow, but it assumes that you're generating your certificates in a Linux environment. Please adapt your OpenSSL usage if you work on another system.</p>"},{"location":"blog/2023/03/05/ssl-certificates-in-dev-environment/#generating-a-root-certificate","title":"Generating a Root Certificate","text":"<p>We'll work with OpenSSL.</p> <p>To keep things tidy, we save each certificate in the same folder <code>~/SSLConfig</code> :</p> <p><pre><code>mkdir -p ~/SSLConfig/cert/CA\ncd ~/SSLConfig/cert/CA\n\nopenssl genrsa -out CA.key -des3 2048\nopenssl req -x509 -sha256 -new -nodes -days 3650 -key CA.key -out CA.pem\n</code></pre></p> <p>Now, you'll be able to generate as many certificates as you want, and you will just have to add your <code>CA.crt</code> to trusted CA lists to any device/browser you want to be able to access to your services.</p> <p>Installing the root certificate in ubuntu</p> <p><pre><code>mkdir -p /usr/local/share/ca-certificates #if not exists\nsudo cp ~/SSLConfig/cert/CA/CA.crt /usr/local/share/ca-certificates\nsudo update-ca-certificates\n</code></pre></p>"},{"location":"blog/2023/03/05/ssl-certificates-in-dev-environment/#generating-a-certificate","title":"Generating a certificate","text":"<p>Since we generated a root certificate, let's create our SSL certificate for our <code>demo.dev.local</code> website :</p> <p><pre><code>mkdir demo.dev.local\ncd ./demo.dev.local\n</code></pre></p> <p>Then, let's create an <code>ext</code> file used to create our certificate :</p> <p>demo.dev.local.ext<pre><code>authorityKeyIdentifier = keyid,issuer\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = demo.dev.local\nIP.1 = 192.168.1.14\n</code></pre></p> <p>Note</p> <p>The last line allow you to use your SSL certificate when querying <code>https://192.168.1.14</code>.  As such, it's optional.</p> <p>Then run the following commands to generate all required files :</p> <p><pre><code>openssl genrsa -out demo.dev.local.key -des3 2048\nopenssl req -new -key demo.dev.local.key -out demo.dev.local.csr\nopenssl x509 -req -in demo.dev.local.csr \\\n-CA ../CA.pem -CAkey ../CA.key -CAcreateserial \\\n-days 3650 -sha256 -extfile demo.dev.local.ext \\\n-out demo.dev.local.crt\nopenssl rsa -in demo.dev.local.key -out demo.dev.local.decrypted.key\n</code></pre></p> <p>Danger</p> <p>When generating your certificates, you will be printed some questions about certificate  (Common Name, Organization info, email, etc.).</p> <p>The CN (Common Name) must be UNIQUE for EACH certificate, including the root CA.  If not, NodeJS will reject your certificates and mark them as <code>self-signed</code> as described here.</p> <p>Now, you should have this folder structure :</p> <p><pre><code>~/SSLConfig\n\u2514\u2500\u2500 cert\n    \u2514\u2500\u2500 CA\n        \u251c\u2500\u2500 CA.key\n        \u251c\u2500\u2500 CA.pem\n        \u251c\u2500\u2500 CA.srl #This file track the latest serial number available for new certs\n\u2514\u2500\u2500 demo.dev.local\n            \u251c\u2500\u2500 demo.dev.local.crt # Public key.\n\u251c\u2500\u2500 demo.dev.local.csr # Contain cert information, used only at generation time.\n\u251c\u2500\u2500 demo.dev.local.decrypted.key # Decrypted key to provide to each server you want to receive SSL requests.\n\u251c\u2500\u2500 demo.dev.local.ext # The config file.\n\u2514\u2500\u2500 demo.dev.local.key # The certificate key.\n</code></pre></p> <p>Configuring the apache2 proxy with our certificate</p> <pre><code>&lt;VirtualHost *:8080&gt;\n    ServerName demo.dev.local\n\n    SSLEngine on\n    SSLCertificateFile /home/[user]/SSLConfig/cert/CA/demo.dev.local/demo.dev.local.crt\n    SSLCertificateKeyFile /home/[user]/SSLConfig/cert/CA/demo.dev.local/demo.dev.local.decrypted.key\n\n    ProxyPreserveHost On\n    ProxyRequests Off\n    ProxyVia Off\n    ProxyPass / ws://127.0.0.1:8081 retry=0\n    ProxyPassReverse / ws://127.0.0.1:8081\n&lt;/VirtualHost&gt;\n</code></pre> <p>To be able to use any of your certificates in a browser, you must install the root certificate into your browser / system / smartphone, and all the generated certificates signed with this CA will be trusted too.</p> <p>Didn't I tell you that Root Certificates are our best friends? </p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/","title":"uWebSockets.js: the package that deserves a greater popularity","text":""},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#uwebsocketsjs-the-package-that-deserves-a-greater-popularity","title":"uWebSockets.js: the package that deserves a greater popularity","text":"<p>When it comes to websockets the first package name that pop out of our mind in the NodeJS ecosystem is... Socket.IO. I would be very surprised if you were surprised!</p> <p>The thing is that Socket.IO is one of the less efficient solutions when it comes to performances. The different wrappers it's based upon just add a tremendous overhead to websocket handling, and still has opaque to non-existent backpressure management as it can be seen in issues #3158 and #4435.</p> <p>Many other alternatives exist, but when performances start to be a major concern, you must find something more efficient. That's why I would want to introduce you to uWebSocket.js!</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#uwebsocketsjs","title":"uWebSockets.js","text":"<p>Long story short, uWebSockets.js is an efficiency focused library written in C++. Did you ever ask yourself if your raspberry PI 4 could handle 100k simultaneous secure websockets connections sending messages every two seconds?</p> <p>With uWebsockets.js, it will handle it pretty smoothly (as long as you don't try to handle compute intensive tasks, obviously), where socket.IO will start  to be very unstable in about 10k simultaneous connections<sup>1</sup>.</p> <p>The point of this example is not that much to prove that it can handle thousands concurrent connections, but rather to show how efficiently it does. Because the less time is spent in I/O writes and read, the more time our apps have to do their work.</p> <p>Sadly, as everything, it comes with a tradeoff: if uWebSockets.js succeed in being utterly efficient in what it does, it fails on one point. A very important one.</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#interoperability","title":"Interoperability","text":"<p>Most (if not the vast majority) of the NodeJS's ecosystem's webservers relies on <code>node:http</code>. Chances are that your preferred webserver package is using it under the hood, among which we find Express, Fastify, NestJS and Koa.</p> <p>All of them will let us configure a <code>node:http</code> server with their callback, or will even create it for us for convenience, and the same applies for most of websockets packages out there: ws, websocket-node, socket.IO and many more relies on the <code>node:http</code> module.</p> <p>Wait... we need an HTTP server to handle websockets?</p> <p>For those who are not very familiar with the websocket protocol, It always starts with an HTTP request that is upgraded to a full-duplex connection. As such, any websocket server is, in fact, an HTTP server.</p> <p>So, what are the implications of this?</p> <p>Having your websockets and your website on the same port is something you don't even have to care about in most cases if you're a happy NodeJS developer.</p> <p>To better understand what I mean, let me tell you a story that I have been told too many times!</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#study-case","title":"Study case","text":"<p>Let's say we started our project with Express (http) + socket.IO (websockets) as it is a very (very) common combination.  Few years later our app gained traction, we installed several nodes on cloud providers and socket.IO starts to reach its limits, making our app unstable. It crashes every time we face a peak usage. We could continue to add nodes or to vertically scale our nodes, but our infrastructure costs would explode.</p> <p>We do some research and find out that socket.IO is slow. Not only is it inefficient, but its footprint on I/O, RAM and processing time is quite huge compared to other solutions. To optimise our app, that is really websocket intensive, we come to the conclusion that we must change our websockets server.</p> <p>By comparing many packages, we figure out that uWebSockets.js is fast and will certainly boost our app capacity by a factor of ten. Quite cool!</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#migrating-from-socketio-to-uwebsocketsjs","title":"Migrating from Socket.IO to uWebSockets.js","text":"<p>We start our tests, find out that we must open two ports in our dev environment. Not a big deal, we do. One or two weeks later, we successfully  replaced Socket.IO in our dev environment. We push our pre-release on the test environment in the cloud and... no websocket connection anymore: <code>ERCONNREFUSED</code> errors are filling up our browser console. </p> <p>A drop of cold sweat makes us shiver. What happened?</p> <p>Our cloud infrastructure only let us ONE public port. If it is possible, we upgrade our plan and set up our new port. If it is not... we're lucky because we won't push a big misconception to production. But today we're not lucky: our cloud provider let us update our plans to open a new port. </p> <p>If you don't see it coming, wait for it </p> <p>Our test passes. We push our release in production and...</p> <p>Some clients start to call us out for support: they do not have any websocket connection anymore. After some investigations, you finally discover where is the problem: they try to reach your app from within a restrictive NAT or behind a strict firewall.</p> <p>So, all of your app traffic must be routed on the same port: 443.</p> <p>A new drop of cold sweat makes you shiver again: uWebSockets.js and <code>node:http</code> are two different servers!  Since uWebSockets.js do not rely on any NodeJS networking tools, it will have to listen to its own port.</p> <p>In simpler words: uWebSockets.js is incompatible with most of NodeJS's webservers.</p> <p>OUCH</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#how-serious-is-it-doc","title":"How serious is it, doc?","text":"<p>Needing two different open ports didn't seem to be a big deal at first glance, isn't it? It was a wrong assumption.</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#network-consideration","title":"Network consideration","text":"<p>It is a big deal if any of your users need to access it from a restrictive NAT or behind a strict firewall. In those conditions, your client will only be able to browse the internet through the port 443 (sometimes, port 80 too but as an insecure protocol its usage slowly fades away). It's usually the case for enterprise/school networks.</p> <p>This is a well-known problem, and we already have solutions for it: just use a proxy like Apache or Nginx! The proxy will listen for all incoming requests and dispatch them to the port you want based on any arbitrary criteria regarding the said requests.</p> <p>Problem solved!</p> <p>No?</p> <p>In most cases, yes, it is. Until you try to deploy your app in the cloud, or until you allow your customers/users to use your app on premises. In the first case, many cloud providers like Heroku or Render will only give you one public port to listen to and won't let you install any proxy, and if they allow you to change some configuration, they're not likely to let you open ports at will.</p> <p>On premises, depending on your user's/customer's business environment, it may just cost too much to open a second port even if the company allows it, which is not very likely, especially if it has a strict security policy. </p> <p>And yet, opening this second port is not a solution since some of our users will not be able to use our service anyway.</p> <p>So... are we screwed ?</p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#our-options","title":"Our options","text":"<p>To pretty much every problem a solution! Let's see what we can do </p>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#1-setting-up-a-dedicated-proxy-in-front-of-our-infrastructure","title":"1) Setting up a dedicated proxy in front of our infrastructure","text":"<ul> <li> <p> Pros</p> <ul> <li>Almost no change in the code (we may want to provide a proxy authentication mechanism)</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Still needs to upgrade cloud offers to open two ports.</li> <li>More expensive</li> <li>More maintenance and skills needed</li> <li>Still impact performances<sup>2</sup> and adds latency</li> <li>Adds a point of failure in the network</li> </ul> </li> </ul>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#2-using-an-express-proxy-middleware-to-forward-websockets-to-uwebsocketsjs","title":"2) Using an express proxy middleware to forward websockets to uWebSockets.js","text":"<ul> <li> <p> Pros</p> <ul> <li>Easy to do</li> <li>Almost no code impact</li> <li>Almost no configuration</li> <li>Feature embedded in code, do not depend on the host</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Defeat uWebSockets.js performances since <code>node:http</code> is slower/less efficient</li> </ul> </li> </ul>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#3-changing-cloud-provider-for-a-more-permissive-one","title":"3) Changing cloud provider for a more permissive one","text":"<ul> <li> <p> Pros</p> <ul> <li>No code change</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Must move the whole infrastructure (code + data)</li> <li>Must learn new cloud providers processes and pitfalls</li> <li>Probably more expensive (especially if long-term subscriptions was purchased for the current infrastructure)</li> </ul> </li> </ul>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#4-going-bare-metal","title":"4) Going bare metal","text":"<ul> <li> <p> Pros</p> <ul> <li>Total freedom</li> <li>Reduces gross costs</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Must move the whole infrastructure (code + data)</li> <li>Maintenance costs rise up</li> <li>Requires more knowledge and skills to set up and troubleshoot</li> <li>Requires even more knowledge and skills when scaling is needed</li> </ul> </li> </ul>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#5-dropping-express","title":"5) Dropping express","text":"<ul> <li> <p> Pros</p> <ul> <li>Best performances, even for the HTTP server</li> </ul> </li> <li> <p> Cons</p> <ul> <li>Costs+++ since it will need a huge app rewrite</li> <li>Can't rely on any express middleware</li> <li>Since uWebSockets.js is not widely used, it can be hard (or even impossible) to find a replacement for the ones we're using.    That being said, the community behind uWebSockets.js tends to create express compatibility layers. But what if you use... NestJS? Koa? Fastify?</li> </ul> </li> </ul>"},{"location":"blog/2023/03/23/uwebsockets-js-the-package-that-deserves-a-greater-popularity/#conclusion","title":"Conclusion","text":"<p>Sadly, there is the conclusion: if we are pragmatic, we must either opt in for solution 2 (Using an express proxy middleware  to forward websockets to uWebSockets.js) that disqualify uWebSockets.js since it will never perform better than express. Or... using a less efficient websockets server that do better than Socket.IO and dropping uWebSockets.js until we can afford a migration.</p> <p>Quite depressing, isn't it?</p> <p>But... what if I told you that there is a better option? (What suspense!)</p> <p>What if we used uWebSockets.js as an HTTP proxy for all non-websocket traffic? We would have the best of both worlds:</p> <ul> <li>Best performances possible for websockets</li> <li>Very light impact on the HTTP server</li> <li>No code changes for the HTTP server, with all the power of the entire NodeJS ecosystem around it</li> </ul> <p>It's why I created and published a package to solve this exact problem: uws-reverse-proxy. If you want to know more about it, click on the button below </p> <p>Discover uws-reverse-proxy </p> <ol> <li> <p>According to 100k secure WebSockets with Raspberry Pi 4, by the maintainer himself.\u00a0\u21a9</p> </li> <li> <p>Any layer / new tenant adds its footprint and must be measured, especially in a scenario where we want something   optimized.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2023/03/24/uws-reverse-proxy-lets-reconcile-uwebsockets-js-with-the-nodejs-ecosystem/","title":"uws-reverse-proxy: let's reconcile uWebSockets.js and the NodeJS ecosystem","text":""},{"location":"blog/2023/03/24/uws-reverse-proxy-lets-reconcile-uwebsockets-js-with-the-nodejs-ecosystem/#uws-reverse-proxy-lets-reconcile-uwebsocketsjs-and-the-nodejs-ecosystem","title":"uws-reverse-proxy: let's reconcile uWebSockets.js and the NodeJS ecosystem","text":"<p>uws-reverse-proxy is an easy-to-use 0-dependency* reverse proxy based on uWebSockets.js I created to solve a problem I encountered recently for one of my clients.</p> <p>This package enables use of <code>uWebSockets.js</code> and any HTTP server on the same port in a matter of seconds and fewer than ten lines of code </p> <p>Warning</p> <p>To get a better context about the genesis of the uws-reverse-proxy package and the problems it solves, please take few minutes to read uWebSockets.js: the package that deserves a greater popularity</p>"},{"location":"blog/2023/03/24/uws-reverse-proxy-lets-reconcile-uwebsockets-js-with-the-nodejs-ecosystem/#what-is-uws-reverse-proxy","title":"What is <code>uws-reverse-proxy</code> ?","text":"<p>A... reverse proxy based on uWebSockets.js. Now that we made things so much more obvious, the questions you may ask yourself are: </p> <p>a) what is a proxy?</p> <p>The quick answer: it's an in an intermediate between a client and a server.</p> <p>More specifically, a proxy is meant to protect a client from the Internet by guaranteeing its privacy.</p> <p>For both proxies and reverse proxies, the network architecture stay identical:</p> With proxyWithout proxy <pre><code>sequenceDiagram\n    participant C as Client\n    participant P as Proxy\n    participant S as Server\n    C-&gt;&gt;P: HTTP request\n    activate P\n    P-&gt;&gt;S: Forwarded HTTP request\n    activate S\n    S-&gt;&gt;P: HTTP Response\n    deactivate S\n    P-&gt;&gt;C: Forwared HTTP response\n    deactivate P</code></pre> <pre><code>sequenceDiagram\n    participant C as Client\n    participant S as Server\n    C-&gt;&gt;S: HTTP request\n    activate S\n    S-&gt;&gt;C: HTTP Response\n    deactivate S</code></pre> <p>b) Okay... but, what is a reverse proxy?</p> <p>While a proxy is meant to protect the client, a reverse proxy is meant to protect the server.</p> <p>When you have a proxy, it doesn't know in advance what kind of website/service you're going to reach: it only protects you by acting in your behalf.</p> <p>The reverse proxy, in another hand, is configured to forward to one or more server configured in advance. It acts on  the behalf of the server, hiding it from you.</p> <p>The goal of uws-reverse-proxy is to help uWebSockets.js users to work... with uWebSockets.js, because as excellent and performant this library is, its main drawback is its lack of interoperability with the rest of the NodeJS ecosystem, especially if you want to combine it with an Express or NestJS server.</p> <p>As many projects require that their user can access the service they provide from everywhere, you need  your application to accept connection on the port 443, since it's the only one that is open in restricted networks like enterprise/school networks.</p> <p>And that's not to mention some server environments, like clouds, that just provide you only one open port and don't allow you to install or configure any proxy.</p> <p>If you're interested in this topic, I encourage you, again, to read uWebSockets.js: the package that deserves a greater popularity if you didn't yet.</p>"},{"location":"blog/2023/03/24/uws-reverse-proxy-lets-reconcile-uwebsockets-js-with-the-nodejs-ecosystem/#installation-usage","title":"Installation &amp; usage","text":"<p>Let's start by installing it in your project:</p> <p>With npm:</p> <p><pre><code>npm install uws-reverse-proxy\n</code></pre></p> <p>With yarn:</p> <p><pre><code>yarn add uws-reverse-proxy\n</code></pre></p> <p>Next, we'll say that you provide an uWebSockets.js:SSLApp instance in <code>uwsApp</code>, and the only code you'll have to write is:</p> <pre><code>const {\nUWSProxy,\ncreateUWSConfig,\ncreateHTTPConfig\n} = require('uws-reverse-proxy');\nconst proxy = new UWSProxy(\ncreateUWSConfig(uwsApp /* (1)! */, { port: 443 /* (2)! */ }),\ncreateHTTPConfig({\nhost: '127.0.0.1', // (3)!\nport: 8080, // (4)!\nprotocol: 'http' // (5)!\n})\n);\nproxy.start();\n</code></pre> <ol> <li>uWebSockets.js SSLApp</li> <li>The public port you want your application to accessible on. Here, it is 443 (https)</li> <li>The listening host for your HTTP server (Express, NestJS, Koa, whatever...). If the proxy and the http server are on the same machine, omit this parameter, it will default to 127.0.0.1 anyway.</li> <li>The listening port for your HTTP server (Express, NestJS, Koa, whatever...). If the proxy and the http server are on the same machine, omit this parameter, it will default to 35794.</li> <li>The protocol used by your HTTP server (Express, NestJS, Koa, whatever...). If the proxy and the http server are on the same machine, omit this parameter, it will default to http. If they're not,      and if the proxy and the HTTP server are not in the same physical or virtual network, you must enable https to secure traffic between the proxy and the server.</li> </ol> See a more complete example using Express: <p>In this example, <code>UWSProxy</code> will create itself an uWebSockets.js <code>App</code> (not an <code>SSLApp</code>, for brevity/clarity concerns). </p> <pre><code>const http = require('http');\nconst express = require('express');\nconst uWebSockets = require('uWebSockets.js');\nconst {\nUWSProxy,\ncreateUWSConfig,\ncreateHTTPConfig\n} = require('uws-reverse-proxy');\nconst port = process.env.PORT || 80;\nconst proxy = new UWSProxy(\ncreateUWSConfig(\nuWebSockets,\n{ port }\n)\n);\nconst expressApp = express();\nexpressApp.listen(\nproxy.http.port,\nproxy.http.host,\n() =&gt; console.log(`Express Server listening at ${proxy.http.protocol}://${proxy.http.host}:${proxy.http.port}`)\n);\nproxy.uws.server.ws({\nidleTimeout: 10,\nopen(){  console.log('New client connected!') },\nclose(){ console.log('Client disconnected!')  },\nmessage(socket, data, isBinary){\nif(isBinary) socket.send(\"Sorry, I don't support binary :/\");\nelse{\nconst msg = TextDecoder.decode(data);\nconsole.log('Message received: ', msg);\nif(msg === 'ping'){\nsocket.send('pong - ' + (new Date()).toUTCString());\n}else{\nsocket.send('Sorry, I only play ping-pong :(');\n}\n}\n}\n});\nproxy.uws.server.listen('0.0.0.0', port, listening =&gt; {\nif(listening){\nconsole.log(`uWebSockets.js listening on port 0.0.0.0:${port}`);\n}else{\nconsole.error(`Unable to listen on port 0.0.0.0:${port}!`);\n}\n});\n</code></pre> <p>If you want to play further, you should take a look at the demo repository I created. It even provide a standalone proxy mode, for you to test uws-reverse-proxy with your own HTTP server without changing your code.</p> <p> Try the demo</p> <p>And you'll find below the links to the github repository and the npm package. Feels free to  contribute and/or report any issue </p> <p> GitHub  NPM</p>"},{"location":"blog/2023/02/25/vps-web-hosting-series-bare-metal-setup-from-start-to-end/","title":"VPS &amp; Web Hosting Series: Bare-metal setup from start to end","text":""},{"location":"blog/2023/02/25/vps-web-hosting-series-bare-metal-setup-from-start-to-end/#vps-web-hosting-series-bare-metal-setup-from-start-to-end","title":"VPS &amp; Web Hosting Series: Bare-metal setup from start to end","text":"<p>Fully configuring a VPS by hand when everybody seems to only rely on cloud nowadays? Really? You'd be surprised to find out that many companies still use VPSs or dedicated servers, especially when they want to run a non-conventional web application, their own private cloud or even to reduce infrastructure costs. </p> <p>And that's not to mention the fact that many cloud providers (like AWS) just provide you an instance that is... a VPS that still needs to be configured!</p> <p>In this series of three articles, let's dive into a case study based on several real setups.</p> <p>This series have been split in three equivalent episodes: </p> <ol> <li>VPS &amp; Web Hosting series part 1: Installation</li> <li>VPS &amp; Web Hosting series part 2: Configuration</li> <li>VPS &amp; Web Hosting series part 3: Maintenance &amp; additional notes</li> </ol> <p>For learning purpose, I added some gotchas. These articles are advanced one but should be readable for beginners with a bit of time and efforts </p> <p>I'm very excited about it. It was a lot of work to come up with, and since it's the first actual tutorial I ever wrote, I hope it will be clear and detailed enough for you to enjoy it! Any feedback would be welcome </p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/","title":"VPS &amp; Web Hosting series part 1: Installation","text":""},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#vps-web-hosting-series-part-1-installation","title":"VPS &amp; Web Hosting series part 1: Installation","text":"<p>Fully configuring a VPS is not that hard nor that long, but when we start our IT journey it's an intimidating task.</p> <p>Today, we'll configure one from scratch (and for fun ). Let's dream about a NodeJS application that must connect to a MongoDB instance hosted somewhere else. To spice-it up a little, our fictive project called IT Rocks is both an HTTP server and a WebSocket server. It must be able to send emails to our customers too.</p> <p>And... since it's a very serious project, it needs to be accessible within restrictive networks as well. Why? Because... what would be  an IT task without a tricky part?</p> <p>Important</p> <p>A few precisions before we start:</p> <ol> <li>This is inspired by several real-world scenarios I encountered in the past few years</li> <li>This tutorial is an advanced one.</li> <li>I tried my best to write it in a way that should allow a beginner not to be lost and reproduce every step without struggling too much</li> <li>This is not only once of those How to? article you may be used to read, it's also a Why? article. It means that I tried to justify why some     decisions have been taken for you to understand that tools and choices are not default ones. They have been thought to fit the project's requirements.</li> </ol> <p>As a consequence, despite my efforts to make it as short and digest as possible, it is quite long and detailed. But so are all real-case IT scenarios we encounter in our jobs.</p> <p>If you're a beginner, you should find here some valuable information and resources that are not that easy to find and compile by yourself. But it comes at a cost: you'll have to invest some time and efforts to understand everything. If something is unclear or if you have a question... just leave a comment :)</p> <p>This is the first part of a series:</p> <ol> <li>VPS &amp; Web Hosting series part 1: Installation</li> <li>VPS &amp; Web Hosting series part 2: Configuration</li> <li>VPS &amp; Web Hosting series part 3: Maintenance &amp; additional notes</li> </ol>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#project-precisions-preparation","title":"Project precisions &amp; Preparation","text":"<p>First of all, we need a VPS (Virtual Private Server) up and running to connect to.</p> <p>To sum up the needs defined in the intro and for clarity sakes, there are the requirements:</p> <ul> <li>NodeJS application</li> <li>HTTP server with express</li> <li>WebSocket server with uWebSocket.js</li> <li>Sends mails</li> <li>Connects to distant MongoDB database service.</li> <li>Accessible in restrictive networks (enterprise, schools, etc.)</li> <li>The project sources are hosted in a Github private repository, with two branches:<ul> <li><code>main</code></li> <li><code>release</code> (the one we want to use on the VPS)</li> </ul> </li> </ul> About express and uWebSocket.js <p>This is not as uncommon as it seems to encounter a scenario like this. You can read more about express and uWebSocket.js configuration pitfalls there, but not to make this tutorial too long, I'll sum it up in one sentence:</p> <p>Express and uWebSocket.js are incompatible. It means that ITRocks needs two open ports. It's important because of the \"accessible in restrictive networks\" requirement.</p> <p>Now, it's time to roll up our sleeves and start typing on our beautiful keyboard </p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#installation","title":"Installation","text":"<p>The first thing to do is obviously to connect to our VPS to install the tools we need.</p> <p>We ordered our VPS few minutes ago, and since our provider is as fast and efficient as our beautiful application, we already received an email with the following information:</p> <p>Dear customer,</p> <p><code>Ubuntu 20.04</code> operating system has been installed on the VPS you ordered:</p> <ul> <li>IPv4 address: <code>156.225.137.143</code> (1)</li> <li>VPS name: <code>ac78ef7.vps.provider.com</code> (2)</li> </ul> <p>The admin account configured on your VPS is:</p> <ul> <li>User: <code>ubuntu</code> (3)</li> <li>Password: <code>Ohb78@hioude!ma09k</code> (4)</li> </ul> <ol> <li>This is a fictive IPv4</li> <li>This is a fictive domain</li> <li>This is a fictive username</li> <li>This is a fictive password</li> </ol> <p>Please, DO NOT use the above credentials as is. CHANGE THEM!</p> <p>The following tutorial should work for Ubuntu Server 22.04 as well. If you use another distribution, the following tutorial may not be accurate nor relevant anymore.</p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#first-connection-and-ubuntu-upgrade","title":"First connection and ubuntu upgrade","text":"<p>Let's connect to the server for the first time through SSH with the command <code>ssh [user]@[ip]</code> or <code>ssh [user]@[domain]</code>. For the current VPS, the exact command using the IP address is:</p> <p><pre><code>ssh ubuntu@156.225.137.143\n</code></pre></p> <p>The first time, it will print you a warning because of self-signed certificate, just accept it.</p> <p>Then type the server password.</p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#securing-ssh-connection-to-the-vps","title":"Securing SSH connection to the VPS","text":"<p>Once logged in, we must start by changing the admin password, since it has been provided in cleartext by mail, its security maybe compromised already, or maybe compromised later.</p> <p><pre><code>sudo passwd ubuntu\n</code></pre></p> <p>Now, the first thing we want to do is disabling SSH password login to prefer a private key secured by a passphrase. This reduces risks of a successful brute-force attack to 0. And your SSH login should remain secure as long as the machine you keep this private key on stays secure too.</p> <p>For the whole tutorial, I'll assume that you're operating from an ubuntu local machine. If it is not the case, please adapt local commands to your operating system.</p> <p>On local machine<pre><code># generate a new key pair (1)\nssh-keygen -t ed25519\n\n# install the public key on the remote server\n# Will ask the password we redefined above\nssh-copy-id -i ${HOME}/.ssh/id_ed25519.pub ubuntu@156.225.137.143\n</code></pre></p> <ol> <li>At this step, you will be given the option to setup a passphrase or not. Keep the habit to always define a passphrase. It makes your private key much harder to steal.</li> </ol> <p>Then, try to connect to your VPS with the command <code>ssh ubuntu@156.225.137.143</code>. Your operating system will ask you the passphrase you chose while generating the certificates, but if the operation was successful, the SSH client will not ask you the <code>ubuntu</code> password.</p> <p>Now, we want to prevent anyone from accessing the server with any password, to enforce keys usage, as well as forbid entirely root login.  Let's create a new ssh config file:</p> <p><pre><code>sudo nano /etc/ssh/sshd_config.d/disable-password-authentication.conf\n</code></pre></p> <p>With the following content:</p> <p><pre><code>ChallengeResponseAuthentication no\nPasswordAuthentication no\nUsePAM no\nPermitRootLogin no\n</code></pre></p> <p>Type Ctrl+S to save and Ctrl+X to exit.</p> <p>Then, we need to reload the SSH server and the SSH daemon:</p> <p><pre><code>sudo systemctl reload ssh\nsudo systemctl reload sshd\n</code></pre></p> <p>Test time. Trying to log with root user should be always rejected, so:</p> <p><pre><code>ssh root@156.225.137.143\n</code></pre></p> <p>Must print <code>Permission denied (publickey).</code>, and:</p> <p><pre><code>ssh ubuntu@156.225.137.143 -o PubkeyAuthentication=no #(1)!\n</code></pre></p> <ol> <li>This option allow us to disable automatic key based authentication to request a password authentication</li> </ol> <p>Must print <code>Permission denied (publickey).</code> too.</p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#upgrading-ubuntu-setting-up-automatic-upgrades","title":"Upgrading ubuntu &amp; setting up automatic upgrades","text":"<p>Now that we successfully secured SSH access to our VPS, let's login once more to upgrade ubuntu:</p> <p><pre><code>ssh ubuntu@156.225.137.143\nsudo apt-get update\nsudo apt-get upgrade\nsudo reboot\n</code></pre></p> <p>Rebooting may or may not be mandatory, so we just go with it anyway.</p> <p>Since we don't want to connect every day just to update the server to get security fixes, we will use  the <code>unattended-upgrades</code> package that will take care of that for us:</p> <p><pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install unattended-upgrades\n</code></pre></p> <p>Then we must enable it:</p> <p><pre><code>sudo dpkg-reconfigure -plow unattended-upgrades\n</code></pre></p> <p>Just choose <code>yes</code> and press Enter.</p> <p>We do not turn on automatic reboot, because we may want to reboot at a specific point in time. ITRocks may want to schedule a maintenance downtime, for example.</p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#installing-needed-packages","title":"Installing needed packages","text":"<p>Let's install what we need to run IT Rocks behind an Apache proxy:</p> <p><pre><code>sudo apt-get install -y apache2 npm certbot python3-certbot-apache fail2ban iptables-persistent\n</code></pre></p> <p>The package iptables-persistent may ask you if you want to save the current <code>ipv4</code> or <code>\u00ecpv6</code> config. The answer doesn't matter, since we will redefine them later anyway.</p> Wait... what are all those packages? <p>It looks like we're installing a bunch of software, let's explain what is what:</p> package description <code>apache2</code> An HTTP server and will be our proxy. It could have been <code>NGinx</code> or <code>Caddy</code> too, for example. <code>npm</code> The NodeJS Package Manager, needed to fetch our project's dependencies. <code>certbot</code> A utility that is useful to manage (generate/install/renew/revoke) SSL certificates signed by Let's Encrypt. <code>python3-certbot-apache</code> A Certbot plugin to work with Apache. It will automatically setup Apache configuration for us in a blink. <code>fail2ban</code> A log analyzer that works with the firewall to ban suspicious activities. <code>iptables-persistent</code> A utility that will persist our firewall configuration. Why do we need a proxy? <p>It seems that the time has come to discuss what we'll install on this server to fulfill our requirements list. The most important information in this requirements list now is the need for 2 open ports and the need for access in most restrictive networks. But what actually are restrictive networks? Why is that important?</p> <p>If at home your gateway (the device that connects your home network to the Internet) do not restrict your online activities, in an enterprise or school network the gateway firewall will most likely block the inbound and outbound traffic on almost every port. Not so long ago, it left two ports open to the Internet: </p> <ul> <li>80 (HTTP)</li> <li>443 (HTTPS)</li> </ul> <p>Since port 80 is insecure and SSL certificates free for years now thanks to our savior Let's Encrypt, port 80 almost disappeared from most of the firewalls' configurations. As such, it leaves us with... port 443. However, our wonderful application still needs two open ports.</p> <p>It looks like we're screwed, isn't it?</p> <p>Not even close. God bless proxies!</p> <p>If you don't know what a proxy is: it's something that acts like an interface between two other things. When it receives a request, it will not answer it himself but rather will forward the request to another service to get the answer, and then send it back to the requester.</p> <p>So we can set up a proxy that will expose only one public port (443 in our case), and route the traffic on two private ports on which  our ITRocks server will be listening. Another welcome benefit is that you can reload the proxy when SSL certificates are renewed without closing ongoing connections. Pretty cool, huh?</p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#nvm-node","title":"NVM &amp; node","text":"<p>Then we'll need nvm to manage NodeJS versions on the same machine, it will ease switching version later if needed:</p> <p><pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n</code></pre></p> <p>This command downloads the last <code>nvm</code> version at the moment this document has been written, to install the last version, please read the install section of their GitHub.</p> <p>Then we install the version of NodeJS that will run our server. <code>Hydrogen</code> is the last LTS (v18.14.2) version at the moment this document has been written:</p> <p><pre><code>nvm install Hydrogen\n</code></pre></p> <p>While writing this doc, Hydrogen downloads the v18.14.2.</p> <p>You can use <code>nvm ls-remote</code> to print all available versions of node, and use <code>nvm ls-remote | grep LTS</code> to filter LTS versions only.</p> <p>It will be set to <code>default</code>, you can check node version with <code>node -v</code>. If it doesn't print the version you installed, run the commands:</p> <p><pre><code>nvm alias default v18.14.2\nnvm use v18.14.2\n</code></pre></p> <p>Then, <code>node -v</code> should print <code>v18.14.2</code></p> <p>Very important note</p> <p>If a Github Action is configured for the current server, you must follow additional instructions for this version change to take effect when the Github Action will run <code>npm install</code> !</p> <p>For now, it shouldn't. But if you come back later or if you didn't follow all steps and encounter strange error messages while trying to run a Github Action, carefully read the above link.</p>"},{"location":"blog/2023/02/27/vps-web-hosting-series-part-1-installation/#installing-itrocks","title":"Installing ITRocks","text":"<p>We start by creating a folder in ubuntu's home folder <code>/home/ubuntu</code>:</p> <p><pre><code>cd ~\nmkdir ITRocks\ncd ITRocks\ngit init\ngit remote add origin git@github.com:example/ITRocks.git\ngit config core.fileMode false\n</code></pre></p> <code>git config core.fileMode false</code>, is this git sorcery? <p>The command <code>git config core.fileMode false</code> is mandatory to avoid git to track local file system permissions changes. </p> <p>If you don't run this command, when the git hooks that we will set up below will change group ownership of all files,  git will later prevent to checkout/pull before stashing or committing.</p> <p>Now, we need to create a <code>deploy token</code> to be able to pull, since the repository is private (do not change generated file path/name, you don't need a passphrase):</p> <p><pre><code>ssh-keygen -t rsa -b 4096 -C example@itrocks.com\n</code></pre></p> <p>Then we will configure the key for git:</p> <p><pre><code>cd ../.ssh\nmv id_rsa ITRocks.deploy.pem\nchmod 400 ITRocks.deploy.pem\nnano config\n</code></pre></p> <p>Type this into the file editor:</p> /home/ubuntu/.ssh/config<pre><code>Host ITRocks\nHostname github.com\nIdentityFile ~/.ssh/ITRocks.deploy.pem\n</code></pre> <p>Then type Ctrl+S to save and Ctrl+X to exit.</p> <p>We want to adapt permissions to this file as well:</p> <p><pre><code>chmod 770 config\n</code></pre></p> <p>Now, you need to copy the content of <code>id_rsa.pub</code>. You can use the Linux <code>scp</code> command from another terminal to download it, or just print it to the console to be able to copy it into your clipboard:</p> <p><pre><code>cat id_rsa.pub\n</code></pre></p> <p>The public key must be set as <code>deploy key</code> on <code>GitHub</code>. To do so, go to the project repository, click on the <code>settings</code> in the top tabs, then choose <code>Deploy Keys</code> in the left panel, and click the <code>Add deploy key</code> button, top right.</p> <p>Type a meaningful name as <code>Public production key on [Provider] VPS</code> as title, and paste the previously copied <code>\u00ecd_rsa.pub</code> file content into the <code>key</code> field. Do not check the <code>Allow write access</code> checkbox for security sakes.</p> <p>Once done, come back to your SSH terminal and type :</p> <p><pre><code>cd ~/ITRocks\ngit config core.sshCommand 'ssh -i /home/ubuntu/.ssh/ITRocks.deploy.pem'\ngit pull\ngit checkout release\n</code></pre></p> <p>And... we've done for the installation process \\o/</p> <p>Now, it's configuration time, in the second part  of this series </p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/","title":"VPS &amp; Web Hosting series part 2: Configuration","text":""},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#vps-web-hosting-series-part-2-configuration","title":"VPS &amp; Web Hosting series part 2: Configuration","text":"<p>In the previous part, we presented the project, installed required packages and even pulled the source code of our incredible app ITRocks into its own folder.</p> <p>The thing is... the real work hasn't been done yet. Be sure that serious stuff will happen in this second part, so stay with me. This is when it starts to be very interesting! Don't worry, though... it's not that hard, I promise </p> <p>We must configure our tools and our VPS to put our app in production. So go grab a cup of warm coffee, open a new terminal and follow me into that really exciting phase!</p> <p>Warning</p> <p>This is the second part of a series:</p> <ol> <li>VPS &amp; Web Hosting series part 1: Installation</li> <li>VPS &amp; Web Hosting series part 2: Configuration</li> <li>VPS &amp; Web Hosting series part 3: Maintenance &amp; additional notes</li> </ol> <p>If you didn't read the VPS &amp; Web Hosting series part 1: Installation, considere doing it before reading what follows </p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#configuration","title":"Configuration","text":"<p>So... let's start to configure <code>apache2</code>, <code>certbot</code>, <code>systemctl</code>, <code>logrotate</code>, <code>iptables</code> and <code>itrocks</code> to get a fully operational production server.</p> <p>For security sakes, we will create a specific user and a specific group to restrain our server ability to access the file system:</p> <p><pre><code>sudo addgroup itrocks\nsudo useradd itrocks -g itrocks\n</code></pre></p> <p>Some permissions must be set up for <code>itrocks</code> to be able to access the folder and run <code>node</code>:</p> <p><pre><code>cd ~\nchmod o+x .\nchmod o+x -R .nvm\n</code></pre></p> Wait! <code>o+x</code>? Isn't it insecure? <p>The <code>o</code> permission is for <code>others</code> and means literally all the operating system users will be able to <code>execute</code> a folder or a file.</p> <p><code>nvm</code> installs a NodeJS version in the current user home directory. It doesn't install it globally for all users. One of the easiest things to do to make that node version available for everyone is to give everyone the permission to execute it.</p> <p>But why? Why do we want other users to be able to run NodeJS?</p> <p>For our <code>itrocks</code> user. This user doesn't need any home directory, and we want him to only have access to the <code>/home/ubuntu/ITRocks</code> directory and to be able to start the server with the <code>node</code> command. Note that it has no read/write permissions in <code>/home/ubuntu/.nvm</code>, only <code>execute</code>.</p> <p>If you later install a new version of node using nvm, don't forget to add the <code>o+x</code> permission to the newly installed NodeJS version!</p> <p>Now, we need to add our main user <code>ubuntu</code> to the newly created group <code>itrocks</code>, because it's <code>ubuntu</code> that will perform updates:</p> <p><pre><code>sudo usermod -aG itrocks ubuntu\n</code></pre></p> <p>Before continuing, you MUST run the <code>exit</code> command and reconnect through SSH for this change to take effects.</p> <p>For git to automatically set up right permissions/ownership to all files when we pull/checkout, let's create a script in <code>/home/ubuntu/tools</code>:</p> <p><pre><code>cd ~\nmkdir tools\nnano tools/gitHook.sh\n</code></pre></p> <p>Then, past this content to the editor:</p> /home/ubuntu/tools/gitHook.sh<pre><code>#!/bin/bash\nPATH=\"/home/ubuntu/ITRocks\"\n/bin/chmod -R 771 \"$PATH\"\n/bin/chown -R :itrocks \"$PATH\"\n</code></pre> <p>Type Ctrl+S to save and Ctrl+X to exit.</p> <p>Then give the execution permission to the script:</p> <p><pre><code>chmod +x tools/gitHook.sh\n</code></pre></p> <p>Now, we will create two hooks in <code>/home/ubuntu/ITRocks/.git/hooks</code> by symlinking our script:</p> <p><pre><code>ln -s /home/ubuntu/tools/gitHook.sh /home/ubuntu/ITRocks/.git/hooks/post-checkout\nln -s /home/ubuntu/tools/gitHook.sh /home/ubuntu/ITRocks/.git/hooks/post-merge\n</code></pre></p> <p>Test it by checkout to the <code>main</code> branch and checkout back to the <code>release</code> branch, then use <code>ls</code> to check all files and folders belongs to the <code>itrocks</code> group:</p> <p><pre><code>cd ITRocks\ngit checkout main\ngit checkout release\nls -al\n</code></pre></p> <p>The <code>ls -al</code> command should print something like this:</p> <p><pre><code>drwxrwx---  8 ubuntu itrocks   4096 Oct 12 17:42 .\ndrwxr-x---  9 ubuntu ubuntu    4096 Oct 13 07:20 ..\ndrwxrwx---  8 ubuntu itrocks   4096 Oct 13 07:21 .git\n-rwxrwx---  1 ubuntu itrocks     77 Oct 12 17:41 .gitignore\n-rwxrwx---  1 ubuntu itrocks   1814 Oct 12 17:42 package.json\n-rwxrwx---  1 ubuntu itrocks 175160 Oct 12 17:42 package-lock.json\n-rwxrwx---  1 ubuntu itrocks   3896 Oct 12 17:45 index.js\n</code></pre></p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#apache2","title":"Apache2","text":"<p>Let's start by enabling required modules:</p> <p><pre><code>sudo a2enmod proxy proxy_http proxy_wstunnel ssl\n</code></pre></p> <p>Then, we will create the file <code>/etc/apache2/sites-available/app.itrocks.com.conf</code> :</p> /etc/apache2/sites-available/app.itrocks.com.conf<pre><code>&lt;VirtualHost *:80&gt;\nServerName app.itrocks.com\n\nProxyRequests Off\nProxyPreserveHost On\nProxyVia Full\n&lt;Proxy *&gt;\nRequire all granted\n        &lt;/Proxy&gt;\nRewriteEngine On\n# If the client try to connect a WebSocket\nRewriteCond %{HTTP:Upgrade} =websocket [NC]\n        RewriteRule /(.*)           ws://127.0.0.1:7001/$1 [P,L]\n        # In any other case, reach the HTTP port\nRewriteCond %{HTTP:Upgrade} !=websocket [NC]\n        RewriteRule /(.*)           http://127.0.0.1:7000/$1 [P,L]\n&lt;/VirtualHost&gt;\n</code></pre> <p>For now, SSL-related config is ignored, Certbot will edit this file for us. We just need to provide him a working config on an insecure VirtualHost.</p> <p>Now we want to enable our website:</p> <p><pre><code>sudo a2ensite app.itrocks.com.conf\nsudo systemctl reload apache2\n</code></pre></p> <p>But before running Certbot, we need a running server.</p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#itrocks","title":"ITRocks","text":"<p>Not only ITRocks is an awesome cutting-edge technology with no rival out there, but it follows best practices too when it comes to security!</p> <p>As such, there is no sensitive configuration information in the git repository. It means that we have to store those configurations in a safe place... that will be a <code>conf.env</code> config file.</p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#safe-config-storage","title":"Safe config storage","text":"<p>Let's start by creating a folder and our <code>conf.env</code> file in <code>~/.config</code>:</p> <p><pre><code>mkdir ~/.config/itrocks\nnano ~/.config/itrocks/conf.env\n</code></pre></p> <p>In the editor, we'll paste our configuration:</p> ~/.config/itrocks/conf.env<pre><code>HTTP_PORT=7000\nHTTP_INTERFACE=127.0.0.1\nWS_PORT=7001\nWS_INTERFACE=127.0.0.1\nMONGO_DB_HOST=example.mongodb.net\nMONGO_DB_PORT=27017\nMONGO_DB_NAME=itrocks\nMONGO_DB_PATH=DB_PATH=\"mongodb+srv://itrocks:itrocks@example.mongodb.net/itrocks?retryWrites=true&amp;w=majority\"\n</code></pre> <p>Type Ctrl+S to save and Ctrl+X to exit.</p> <p>In order to protect it, we need to set up right permissions:</p> <p><pre><code>chmod -R 400 ~/.config/itrocks\n</code></pre></p> <p>Now, the file belongs to the <code>ubuntu</code> user and is read only, so the <code>itrocks</code> user itself can't read it. This way, we ensure that even if an exploit can be used in the ITRocks app to try to read/change the <code>conf.env</code> file that stores sensitive data (credentials, api keys, etc.), it won't be able to access it anyway. </p> <p>As a reminder, within our configuration, the <code>itrocks</code> user will only have access to two things:</p> <ul> <li>The <code>/home/ubuntu/ITRocks</code> folder (recursively) containing sources with read, write and execute permissions.</li> <li>The <code>/home/ubuntu/.nvm</code> folder (recursively) with only the execute permission to be able to run node.</li> </ul> <p>About <code>/home/ubuntu/ITRocks</code> permissions</p> <p>Since ITRocks is fictive, we don't know what it must be able to do with its own source code.</p> <p>But as a rule of thumb, it should not be able to write. And if it should be able to read/write files, you should provide a working directory path in <code>conf.env</code> file, and set up all permissions to this directory somewhere else in the system.</p> <p>It can work because it's <code>systemd</code> that will read this file and provide declared environment  variables to the app. It will read it with <code>root</code> privileges.</p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#systemctl","title":"Systemctl","text":"<p>This is a service manager used to manage the lifecycle of our <code>itrocks</code> instance. We will create two files in <code>/etc/systemd/system/</code>:</p> <ul> <li><code>itrocks@.service</code>: a template unit that will allow us, later, to run multiple instances of ITRocks on the same server. When we would need to horizontally scale later.</li> <li><code>itrocks.target</code>: the service unit that will decide how much instances to run at a time and manage them for us. Systemd will ensure ITRocks is running from the server startup to the server shutdown and relaunch it if it crashes.</li> </ul> Why not using <code>PM2</code> or <code>nodemon</code> instead ? <p>Some people like to use something like PM2 or Nodemon to daemonize a NodeJS application. But I'll not stand with them, because I do find them useless. Since we still need some init system to make sure they start on boot and restart if they crash. And that's without saying that any init system shipped with any Linux distro will give you as many (if not more) features than those NodeJS based process managers.</p> <p>IMHO, they are a useless additional layer that we should get ride off in a vast majority of use-cases  Keeping our (already) huge tech stacks as tiny as possible is probably one of the most underrated efforts in our field nowadays (at least for Web Development).</p> <p>That was my 2 cents about it.</p> <p>Let's start by <code>/etc/systemd/system/itrocks@.service</code>.</p> <p>We will need to know the path to the <code>node</code> binaries:</p> <p><pre><code>which node\n</code></pre></p> <p>Should print something like <code>/home/ubuntu/.nvm/versions/node/v18.14.2/bin/node</code>. We will use it to define the first systemctl unit in <code>ExecStart</code>. So, do not forget to replace this path if it is different in your environment.</p> <p>Then create the file by typing <code>sudo nano /etc/systemd/system/itrocks@.service</code> and pasting the following content into the editor:</p> /etc/systemd/system/itrocks@.service<pre><code>[Unit]\nDescription = \"ITRocks instance %i\"\nRequires = network.target\nAfter = network.target\nPartOf = itrocks.target\n[Service]\nUser = itrocks\nRestart = always\nWorkingDirectory = /home/ubuntu/ITRocks\nEnvironmentFile = /home/ubuntu/.config/itrocks/conf.env\nExecStart = /home/ubuntu/.nvm/versions/node/v18.14.2/bin/node index\nStandardOutput = append:/var/log/itrocks.%i.instance.log\nStandardError = append:/var/log/itrocks.err.%i.instance.log\n[Install]\nWantedBy = multi-user.target\n</code></pre> <p>Type Ctrl+S to save and Ctrl+X to exit.</p> <p>Then we will create <code>/etc/systemd/system/itrocks.target</code> by typing <code>sudo nano /etc/systemd/system/itrocks.target</code>:</p> /etc/systemd/system/itrocks.target<pre><code>[Unit]\nDescription=ITRocks instance(s)\n# To add more instances, just add a new service in the list by increasing the service number:\n# Requires=itrocks@1.service itrocks@2.service picakform@3.service ...\nRequires=itrocks@1.service\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Again, type Ctrl+S to save and Ctrl+X to exit.</p> <p>Our services are ready, we just need to activate them:</p> <p><pre><code>sudo systemctl enable itrocks.target\nsudo systemctl start itrocks.target\n</code></pre></p> <p>To manage ITRocks now, you can:</p> <ul> <li>run <code>sudo systemctl start itrocks.target</code></li> <li>run <code>sudo systemctl status itrocks.target</code></li> <li>run <code>sudo systemctl stop itrocks.target</code></li> <li>run <code>sudo systemctl restart itrocks.target</code></li> </ul> <p>But you can also use those commands to manage each instance individually (if there is several instances in the future):</p> <ul> <li>run <code>sudo systemctl start itrocks@1</code></li> <li>run <code>sudo systemctl status itrocks@1</code></li> <li>run <code>sudo systemctl stop itrocks@1</code></li> <li>run <code>sudo systemctl restart itrocks@1</code></li> </ul>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#logrotate","title":"Logrotate","text":"<p>Logrotate will rotate our logs to compress them and remove them automatically after some delay.</p> <p>To configure it, just run:</p> <p><pre><code>nano /etc/logrotate.d/itrocks\n</code></pre></p> <p>And paste the following content in the editor:</p> /etc/logrotate.d/itrocks<pre><code>/var/log/itrocks.*.log {\n       daily\n       rotate 14\n       delaycompress\n       compress\n       notifempty\n       missingok\n}\n</code></pre> <p>Then, type Ctrl+S to save and Ctrl+X to exit.</p> <p>This configuration will rotate itrocks logs daily and keep them 14 days before cleaning them up.</p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#certbot","title":"Certbot","text":"<p>Now, we want to enable SSL for our proxy.</p> <p>Just run:</p> <p><pre><code>sudo certbot --apache\n</code></pre></p> <p>Type the maintainer's mail address, select all domains and accepts terms and conditions.</p> <p>Once certbot executed, we must edit the SSL config to ensure our websockets will be proxied too.</p> <p>In our case, the apache file was <code>/etc/apache2/sites-available/app.itrocks.com.conf</code>, so Certbot will generate a file named <code>/etc/apache2/sites-available/app.itrocks.com.conf-le-ssl.conf</code>:</p> <p><pre><code>sudo nano /etc/apache2/sites-available/app.itrocks.com.conf-le-ssl.conf\n</code></pre></p> <p>You should see something like this:</p> /etc/apache2/sites-available/app.itrocks.com.conf-le-ssl.conf<pre><code>&lt;IfModule mod_ssl.c&gt;\n&lt;VirtualHost *:443&gt;\nServerName app.itrocks.com\n\nDocumentRoot /var/www/html\nProxyRequests Off\nProxyPreserveHost On\nProxyVia Full\n&lt;Proxy *&gt;\nRequire all granted\n        &lt;/Proxy&gt;\nRewriteEngine On\n# If the client try to connect a WebSocket\nRewriteCond %{HTTP:Upgrade} =websocket [NC]\n        RewriteRule /(.*)           ws://127.0.0.1:7001/$1 [P,L] # WS_PORT=7001 is used\n        # In any other case, reach the HTTP port\nRewriteCond %{HTTP:Upgrade} !=websocket [NC]\n        RewriteRule /(.*)           http://127.0.0.1:7000/$1 [P,L] # HTTP_PORT=7000\n\nProxyPassReverse / http://127.0.0.1:7000/\n\nInclude /etc/letsencrypt/options-ssl-apache.conf\nSSLCertificateFile /etc/letsencrypt/live/app.itrocks.com/fullchain.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/app.itrocks.com/privkey.pem\n&lt;/VirtualHost&gt;\n&lt;/IfModule&gt;\n</code></pre> <p>Then, type Ctrl+S to save and Ctrl+X to exit.</p> <p><pre><code>sudo systemctl reload apache2\n</code></pre></p> <p>And this is the end of it! ITRocks is now reachable on the url https://app.itrocks.com/</p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#iptables","title":"Iptables","text":"<p>Now that we have a running server, let's secure it with ubuntu's <code>iptables</code> firewall.</p> <p>We will create a file in <code>/home/ubuntu/tools</code> called <code>\u00ecptables.config.sh</code>:</p> <p><pre><code>cd ~/tools\nnano iptables.config.sh\n</code></pre></p> <p>Past this content into the editor:</p> /home/ubuntu/tools/iptables.config.sh<pre><code>#!/bin/bash\n# Empty current tables\niptables -t filter -F\n\n# Empty personal rules\niptables -t filter -X\n\n# Deny all\niptables -t filter -P INPUT DROP\niptables -t filter -P FORWARD DROP\niptables -t filter -P OUTPUT DROP\n\n# Do not break established connections\niptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\niptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n\n# Allow loopback\niptables -t filter -A INPUT -i lo -j ACCEPT\niptables -t filter -A OUTPUT -o lo -j ACCEPT\n\n# ICMP (ping)\niptables -t filter -A INPUT -p icmp -j ACCEPT\niptables -t filter -A OUTPUT -p icmp -j ACCEPT\n\n# SSH \niptables -t filter -A INPUT -p tcp --dport 22 -j ACCEPT\niptables -t filter -A OUTPUT -p tcp --dport 22 -j ACCEPT\n\n# DNS\niptables -t filter -A OUTPUT -p tcp --dport 53 -j ACCEPT\niptables -t filter -A OUTPUT -p udp --dport 53 -j ACCEPT\niptables -t filter -A INPUT -p tcp --dport 53 -j ACCEPT\niptables -t filter -A INPUT -p udp --dport 53 -j ACCEPT\n\n# APACHE : HTTP + HTTPS\niptables -t filter -A OUTPUT -p tcp --dport 80 -j ACCEPT\niptables -t filter -A OUTPUT -p tcp --dport 443 -j ACCEPT\niptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT\niptables -t filter -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Allow distant mongodb connection\niptables -t filter -A OUTPUT -p tcp --dport 27017 -j ACCEPT\niptables -t filter -A INPUT  -p tcp --dport 27017 -j ACCEPT\n\n# SMTP Port\niptables -t filter -A OUTPUT -p tcp --dport 465 -j ACCEPT\niptables -t filter -A INPUT -p tcp --dport 465 -j ACCEPT\n</code></pre> <p>Danger</p> <p>Modifying this file may lock you out the server, as well as using some <code>iptables</code> command like <code>iptables flush</code>. Since by default the policy is to reject all, if you flush all configurations, the server will reject everything the  instant the command is executed, cutting your SSH connection too. </p> <p>This is still temporary at this step, because those changes only happen in memory. If you mess it up, restart the server by using your provider's admin panel. </p> <p>If restart doesn't work because the restart command sent by your provider use a blocked  port, you'll need to rely on your provider support, or on an emergency or recovery procedure he planned.</p> <p>Then, type Ctrl+S to save and Ctrl+X to exit.</p> <p>Give execution permission to this newly created file and run it to apply:</p> <p><pre><code>chmod +x iptables.config.sh\nsudo ./iptables.config.sh\n</code></pre></p> <p>Danger</p> <p>Before persisting those rules in the next step, it is very important to test that everything is working fine:</p> <ol> <li>Exit and reconnect in <code>SSH</code> to ensure it is still possible</li> <li>Try to reach ITRocks and make it send an email to one of your addresses (ensure that you receive it)</li> <li>Login to ITRocks and check that your websocket is successfully connected.</li> <li>Try to run <code>sudo apt-get update</code> and <code>sudo apt-get upgrade</code> to ensure that the firewall rules do not prevent those commands to execute.</li> </ol> <p>Once all is ok, we can persist <code>iptables</code> configuration:</p> <p><pre><code>sudo iptables-save &gt; rules.v4\nsudo mv rules.v4 /etc/iptables\n</code></pre></p> <p>Check that  <code>iptables-persistent</code> is running:</p> <p><pre><code>sudo systemctl status netfilter-persistent.service\n</code></pre></p> <p>Should print something like:</p> <p><pre><code>\u25cf netfilter-persistent.service - netfilter persistent configuration\n     Loaded: loaded (/lib/systemd/system/netfilter-persistent.service; enabled; vendor preset: enabled)\n    Drop-In: /etc/systemd/system/netfilter-persistent.service.d\n             \u2514\u2500iptables.conf\n     Active: active (exited) since Thu 2023-02-21 23:43:04 UTC; 19h ago\n       Docs: man:netfilter-persistent(8)\n   Main PID: 518 (code=exited, status=0/SUCCESS)\n        CPU: 7ms\n\nFeb 21 23:43:04 vps-ac78ef7 systemd[1]: Starting netfilter persistent configuration...\nFeb 21 23:43:04 vps-ac78ef7 netfilter-persistent[522]: run-parts: executing /usr/share/netfilter-persistent/plugin&gt;\nFeb 21 23:43:04 vps-ac78ef7 netfilter-persistent[524]: Warning: skipping IPv4 (no rules to load)\nFeb 21 23:43:04 vps-ac78ef7 netfilter-persistent[522]: run-parts: executing /usr/share/netfilter-persistent/plugin&gt;\nFeb 21 23:43:04 vps-ac78ef7 netfilter-persistent[526]: Warning: skipping IPv6 (no rules to load)\nFeb 21 23:43:04 vps-ac78ef7 systemd[1]: Finished netfilter persistent configuration.\nlines 1-15/15 (END)\n</code></pre></p> <p>If it is not running, you must enable it by hand:</p> <p><pre><code>sudo systemctl enable netfilter-persistent.service\nsudo systemctl start netfilter-persistent.service\n</code></pre></p>"},{"location":"blog/2023/02/28/vps-web-hosting-series-part-2-configuration/#fail2ban","title":"Fail2ban","text":"<p>Fail2ban is a tool to prevent intrusions by watching different services logs. We will use it to watch <code>apache</code> logs and to protect our <code>SSH</code> from brute force attacks.</p> <p>We must start by enabling it:</p> <p><pre><code>sudo systemctl enable fail2ban --now\n</code></pre></p> <p>Now we need to create a local jail and start editing it:</p> <p><pre><code>sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\nsudo nano /etc/fail2ban/jail.local\n</code></pre></p> <p>Starts by uncommenting the following lines (to find them quickly type Ctrl+W, then type the string you search, then type Enter):</p> <ul> <li><code>bantime.increment = true</code></li> <li><code>bantime.multipliers = 1 2 4 8 16 32 64</code></li> <li><code>ignoreip = 127.0.0.1/8 ::1</code></li> </ul> <p>Now, we will enable some jails.</p> <p>A jail looks like this:</p> /etc/fail2ban/jail.local<pre><code>[sshd]\n# To use more aggressive sshd modes set filter parameter \"mode\" in jail.local:\n# normal (default), ddos, extra or aggressive (combines all).\n# See \"tests/files/logs/sshd\" or \"filter.d/sshd.conf\" for usage example and details.\n#mode   = normal\nport    = ssh\nlogpath = %(sshd_log)s\nbackend = %(sshd_backend)s\n</code></pre> <p>By default, they are disabled. To enable a jail, just add <code>enabled = true</code> after the last parameter:</p> /etc/fail2ban/jail.local<pre><code>[sshd]\n# To use more aggressive sshd modes set filter parameter \"mode\" in jail.local:\n# normal (default), ddos, extra or aggressive (combines all).\n# See \"tests/files/logs/sshd\" or \"filter.d/sshd.conf\" for usage example and details.\n#mode   = normal\nport    = ssh\nlogpath = %(sshd_log)s\nbackend = %(sshd_backend)s\nenabled = true\n</code></pre> <p>There is the list of jails we want to enable:</p> <ul> <li><code>[sshd]</code></li> <li><code>[apache-auth]</code></li> <li><code>[apache-badbots]</code></li> <li><code>[apache-botsearch]</code></li> <li><code>[apache-fakegooglebot]</code></li> <li><code>[apache-modsecurity]</code></li> </ul> <p>When you're done, type Ctrl+S to save and Ctrl+X to exit.</p> <p>Then you need to reload fail2ban for those changes to take effect:</p> <p><pre><code>sudo systemctl restart fail2ban\n</code></pre></p> <p>Now that our server is fully configured, we need to have a talk about maintenance and additional notes, tips and advices in the third and last part for this series </p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/","title":"VPS &amp; Web Hosting series part 3: Maintenance &amp; additional notes","text":""},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#vps-web-hosting-series-part-3-maintenance-additional-notes","title":"VPS &amp; Web Hosting series part 3: Maintenance &amp; additional notes","text":"<p>So... we did install everything we needed on our VPS to fulfill our client (ITRocks) requirements. The app is running blazing fast, it's secured and all but...</p> <p>Did you think it was enough? Or did you secretly hope that there will be more? Maybe both! </p> <p>Let's go a step further with this last part. To be fair, this part could have been itself an entire series, but we've already learned a lot, and what can be done next is... an almost infinite number of things depending on your use cases.</p> <p>Warning</p> <p>This is the third part of a series:</p> <ol> <li>VPS &amp; Web Hosting series part 1: Installation</li> <li>VPS &amp; Web Hosting series part 2: Configuration</li> <li>VPS &amp; Web Hosting series part 3: Maintenance &amp; additional notes</li> </ol> <p>If you didn't read the VPS &amp; Web Hosting series part 1: Installation or VPS &amp; Web Hosting series part 2: Configuration, please considere doing it before reading what follows </p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#additional-implicit-requirements","title":"Additional implicit requirements","text":"<p>Very often when you deal with a client (even if he works in IT), you have to fulfill some requirements that said client didn't even phrase. Being able to anticipate his/her need is a soft skill that comes with experience.</p> <p>Some of those implicit requirements depends on the client and its project, but at least one of them is 100% applicable every time you do such a work for anyone:</p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#documentation","title":"Documentation","text":"<p>Documentation is NOT optional. </p> <p>What if I told you that I love writing it? And what if a told you that you can learn to love it too? This will be the subject of another article  For now, just remember that documentation in general is mandatory. Our job is complex, we make decisions all day, choose all day long that solution instead of that other one. Our Tech stacks are growing faster than the whole universe expansion every year.</p> <p>We just can't afford the cost of undocumented whatever in this battlefield.</p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#why-is-it-important","title":"Why is it important?","text":"<p>No matter who you are and why you ended up installing and configuring this VPS, you must create a document that explains what you did and how. The why is not that important in this kind of documentation unless explaining something very tricky and specific to the project itself.</p> <p>So, creating this documentation is mandatory for the following reasons:</p> <ol> <li>Transmission: Someone else than you will probably have to maintain the server for whatever reason.</li> <li>Chaos reduction: They are literally thousands of tools, commands, packages and configuration tweaks that can lead to the same result,    so knowing what has been done is not just a matter of experience and skills.</li> <li>Highlighting gotchas: Even if you're the only maintainer for the whole project life, if you have to come back three years later, you'll probably    break something because you'll not remember that because <code>A</code>, <code>B</code> and the conjunction of <code>C &amp; D | E</code>, you must run this command after this one    if it has not been written somewhere. </li> <li>Legacy: If you or someone else have to change something, you want this someone to document his/her changes. Without an existing documentation, this change will be forgotten too.</li> <li>Auditability: It attests the work you've done so far, and if someone else breaks something, you'll be glad to demonstrate that it was not you.</li> <li>Reviewing: If you misconfigured something, someone will be able to spot it reading your exhaustive documentation. This is probably the best benefit of this list!</li> <li>Proofreading: If you misconfigured something, proofreading your documentation a week or two later will help you spot your error.</li> <li>Aren't there still enough reasons to write this documentation yet? Do you really need another one? </li> </ol> <p>All of this come to the last and most evident observation: writing this documentation will actually save time and money, both for you and your client/company, in a way or another!</p> <p>Those reasons are adaptable and applicable to any form of IT-related work. Documentation is always required. Even for pet projects </p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#how-to-write-it","title":"How to write it?","text":"<p>KISS (not this one but rather Keep It Simple Stupid)</p> <p>Just write in chronological order all commands you ran, every tool you installed, every configuration file you edited. And if you forgot to do it for a while,  you still can even print your bash history to get a good starting point:</p> <p><pre><code>cat ~/.bash_history\n</code></pre></p> <p>A very bad documentation is always better than no documentation at all </p> <p>As an example, this kind of section in your documentation can save you from a painful debugging session:</p> Example: documentation section about server's open ports <p>If you add a new service that must be reached by the ITRocks server or any software that you install on this server, do not forget to check if a new rule must be added to iptables to open a new port.</p> <p>There is the exhaustive list of all open ports (KEEP THIS LIST UP TO DATE !):</p> port service <code>22</code> SSH <code>53</code> DNS <code>80</code> HTTP <code>443</code> HTTPS <code>465</code> SSMTP <code>27017</code> MongoDB"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#monitoring","title":"Monitoring","text":"<p>Being able to monitor a server is one of the most important things. Is this node running smoothly or  do we reach its maximum capacity? Should we consider upgrading our VPS? Spawning a new instance? How many requests by second do we handle? Does our server handle high traffic peaks without downtime?</p> <p>Monitoring can help us understand what's going on, and, more important, can reassure us in the health of our online service.</p> <p>That's why we'll install Netdata below.</p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#but-what-about-the-implicit-requirements","title":"But... what about the implicit requirements?","text":"<p>Now, let's see what can be an implicit requirement by giving an additional precision about our study case: </p> <p>While speaking with our client, we learned that he's not comfortable with CLI nor SSH. He did want a VPS  for the freedom of configurations it offers at a cheap price, but will outsource its management to someone else. </p> <p>All he wants to be able to do is very basic tasks from SSH once in a while (upgrading ITRocks, rebooting/upgrading the server), so he asked us to give him a simple script to do it in a blink.</p> <p>He told us that he likes all things to be available in the same place and one this script at the root of his project's repository.  And at this occasion, he added that he relies on VSCode extensions to manage his GitHub repositories too.</p> <p>This is exactly what I call an implicit requirement.</p> <p>So... let's see what we can do with that information under our belt </p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#additional-configuration","title":"Additional configuration","text":"<p>First of all, we already redacted a beautiful documentation as we configured the server. So we'll just have to add the few steps below.</p> <p>It allows us to go for the next task... monitoring!</p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#netdata","title":"Netdata","text":"<p>Netdata is a powerful monitoring tool that even comes with a panel. Not only is it open source, but it does provide a clean cloud environment and my favorite feature about it is... you can write your own data collector. It means that if our client wants to add metrics tailored to its needs, he can do it without that many efforts later, and it will integrate itself nicely in his Netdata panel!</p> <p>The icing on the cake: it is fairly simple to install, just run:</p> <p><pre><code>wget -O /tmp/netdata-kickstart.sh https://my-netdata.io/kickstart.sh &amp;&amp; sh /tmp/netdata-kickstart.sh\n</code></pre></p> <p>By default, the panel is publicly available at <code>http://[server ip]:19999</code> but our firewall rules will hopefully block it.  Since it's not that useful like this, we'll use <code>apache2</code> to create a new proxy especially for Netdata.</p> <p>Let's start by issuing some self-signed certificates:</p> <p><pre><code>sudo openssl req -x509 -nodes -days 365 \\\n-newkey rsa:4096 \\\n-keyout /etc/ssl/private/apache-selfsigned.key \\\n-out /etc/ssl/certs/apache-selfsigned.crt\n</code></pre></p> <p>Now we need to create a new <code>apache2</code> configuration file:</p> <p><pre><code>sudo nano /etc/apache2/sites-available/vps.netdata.itrocks.com.conf\n</code></pre></p> <p>Paste this content into the editor:</p> /etc/apache2/sites-available/vps.netdata.itrocks.com.conf<pre><code>&lt;VirtualHost *:443&gt;\nServerName vps.netdata.itrocks.com\n\nSSLEngine on\nSSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\nSSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\nProxyRequests Off\nProxyPreserveHost On\n&lt;Proxy *&gt;\nAllowOverride None\nAuthType Basic\n        AuthName \"Protected site\"\nAuthUserFile /etc/apache2/.htpasswd\nRequire valid-user\n    &lt;/Proxy&gt;\nProxyPass \"/\" \"http://localhost:19999/\" connectiontimeout=5 timeout=30 keepalive=on\n    ProxyPassReverse \"/\" \"http://localhost:19999/\"\nErrorLog ${APACHE_LOG_DIR}/netdata-error.log\n    CustomLog ${APACHE_LOG_DIR}/netdata-access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Then, type Ctrl+S to save and Ctrl+X to exit.</p> <p>We will need to create a user and a password:</p> <p><pre><code>sudo htpasswd -c /etc/apache2/.htpasswd netdata\n</code></pre></p> <p>We now need to enable this new website and reload <code>apache2</code>:</p> <p><pre><code>sudo a2ensite vps.netdata.itrocks.com.conf\nsudo systemctl reload apache2\n</code></pre></p> <p>You can now browse https://vps.netdata.itrocks.com (once your domain have been set up to point to the server IP, obviously).</p> <p>Accept the security exception regarding the self-signed certificate, specify your username (in our case Netdata) and the password you typed at the previous step and... voil\u00e0.</p> <p>Metrics everywhere!</p> <p>I leave it to you to use Certbot to get a valid certificate instead </p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions are an amazing tool you should put your hands on ASAP if you didn't yet!</p> <p>Since our client is used to VSCode and not comfortable with CLI, lets set up a GitHub Action that will be integrated directly in its favorite code editor in no time with a plugin like <code>GitHub Actions</code></p> <p>To allow him to deploy directly from the main GitHub repository in tab <code>Actions</code>, you must start by creating three secrets into <code>Settings</code> -&gt; <code>Secrets</code>.</p> <p>You must adapt their names to try to describe the new server instance with a meaningful name, they must be different for each server):</p> <ul> <li><code>PROD_VPS1_HOST</code> : host ip or domain (for us it is <code>156.225.137.143</code>)</li> <li><code>PROD_VPS1_USER</code> : main ssh user (for us it is <code>ubuntu</code>)</li> <li><code>PROD_VPS1_PWD</code> : ssh pwd for the above user</li> </ul> <p>Then you must create a new file in the <code>main</code> branch of the main repository in <code>.github/workflows</code>, let's call it <code>vps1.prod.yml</code> with the following content:</p> .github/workflows/vps1.prod.yml<pre><code># This is a basic workflow that is manually triggered\nname: Deploy to VPS1 (production)\non: workflow_dispatch\njobs:\ndeploy_OVH_VPS1:\nruns-on: ubuntu-latest\nsteps:\n- name: SSH Remote Commands\nuses: appleboy/ssh-action@v0.1.5\nwith:\nhost: ${{ secrets.PROD_VPS1_HOST }}\nusername: ${{ secrets.PROD_VPS1_USER }}\npassword: ${{ secrets.PROD_VPS1_PWD }}\nscript: |\ncd ~/ITRocks\nrm -rf node_modules\ngit checkout release\ngit pull\nnpm install\nsudo chown -R :itrocks node_modules\nsudo systemctl restart itrocks.target\nsudo systemctl status itrocks.target\n</code></pre> <p>Think to replace the main name, and secrets names by the one you defined !</p> <p>Warning</p> <p>For the GithubAction to be able to run <code>npm install</code> with the right version of node, you MUST provide to the system a way to locate the good <code>node</code> binary to execute.</p> <p>To do so, please follow these few steps:</p> <ol> <li>Run the command <code>which node</code> to get the current used node path. There, it should be <code>/home/ubuntu/.nvm/versions/node/18.14.2/bin/node</code></li> <li>Edit the file <code>/etc/envrionment</code> by running <code>nano /etc/environment</code></li> <li>Add the path to the node binary by adding at the beginning of the <code>PATH</code> variable value <code>/home/ubuntu/.nvm/versions/node/v18.14.2/bin:</code></li> <li>Type Ctrl+S to save and Ctrl+X to exit.</li> </ol> <p>Commit to the main branch, and voil\u00e0, you'll be able to use your new GitHub Action as explained in the maintenance section, except you obviously want to select the action you just added.</p> <p>I leave it to you to create the same kind of GitHub Action to upgrade and reboot the server at will  </p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#maintenance","title":"Maintenance","text":"<p>First of all, we could have installed a tool like Plesk or CPanel.  Note that it's proprietary/licensed with a paid version.</p> <p>For our job, I feel like a Plesk panel is too much for our case: our client just need to push a new release in production, to upgrade the server or just to reboot it.</p> <p>The maintenance of our VPS is minimal, since Certbot auto-renew all needed certificate automatically and reload Apache2 by its own. We may want to log in to reboot the server every month or so to apply some pending security updates.</p> <p>The only other real maintenance you would want to do is to deploy a new ITRocks version.</p> <p>To deploy a new update, you must sync the server with the main repository <code>release</code> branch.  So, first, you must ensure your changes have been pushed to the <code>release</code> branch, then all you have  to do is a <code>git pull</code> on the VPS.</p> <p>To do so, you have two choices :</p> <ol> <li>The Wonderful GitHub Action we just set up at the previous step</li> <li>Command line + SSH</li> </ol>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#github-actions_1","title":"GitHub Actions","text":"<p>The easy way.</p> <p>Go to the main repository. In the <code>Actions</code> tab, selects <code>Deploy to VPS1 (production)</code>, then click the <code>run workflow</code> button, then the second <code>run workflow</code> button.</p> <p>Wait for a minute or two for the process to end and... voil\u00e0. The server has been synchronized with the <code>release</code> branch!</p> <p>And if you're a VSCode user, just install the <code>GitHub Actions</code> plugin to let magic happen!</p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#command-line-ssh","title":"Command line + <code>SSH</code>","text":"<p>You will just do what the Github Action would have done, but by hand:</p> <p><pre><code>ssh ubuntu@156.225.137.143\ncd ITRocks\nrm -rf node_modules\ngit checkout release # to be sure we are on the right branch\ngit pull\nnpm install\nsudo systemctl restart itrocks.target\n</code></pre></p> <p>Check that both the target service and the ITRocks instance are running:</p> <p><pre><code>sudo systemctl status itrocks.target\nsudo systemctl status itrocks@1.service\n</code></pre></p> <p>Then you can log out with <code>exit</code>.</p>"},{"location":"blog/2023/03/01/vps-web-hosting-series-part-3-maintenance-additional-notes/#conclusion","title":"Conclusion","text":"<p>This is the end of this VPS &amp; Web Hosting tutorial series. I hope that it helped you to have a wider view of what can be done and how to approach this kind of configuration process.</p> <p>If you have any question, any observation or any correction, feels free to comment </p>"}]}